#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UaFootball.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="UaFootball")]
	public partial class UaFootball_DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertStadium(Stadium instance);
    partial void UpdateStadium(Stadium instance);
    partial void DeleteStadium(Stadium instance);
    partial void InsertClub(Club instance);
    partial void UpdateClub(Club instance);
    partial void DeleteClub(Club instance);
    partial void InsertPlayerPosition(PlayerPosition instance);
    partial void UpdatePlayerPosition(PlayerPosition instance);
    partial void DeletePlayerPosition(PlayerPosition instance);
    partial void InsertMatchEvent(MatchEvent instance);
    partial void UpdateMatchEvent(MatchEvent instance);
    partial void DeleteMatchEvent(MatchEvent instance);
    partial void InsertNationalTeam(NationalTeam instance);
    partial void UpdateNationalTeam(NationalTeam instance);
    partial void DeleteNationalTeam(NationalTeam instance);
    partial void InsertCompetitionStage(CompetitionStage instance);
    partial void UpdateCompetitionStage(CompetitionStage instance);
    partial void DeleteCompetitionStage(CompetitionStage instance);
    partial void InsertReferee(Referee instance);
    partial void UpdateReferee(Referee instance);
    partial void DeleteReferee(Referee instance);
    partial void InsertMultimediaTag(MultimediaTag instance);
    partial void UpdateMultimediaTag(MultimediaTag instance);
    partial void DeleteMultimediaTag(MultimediaTag instance);
    partial void InsertMatch(Match instance);
    partial void UpdateMatch(Match instance);
    partial void DeleteMatch(Match instance);
    partial void InsertFIFAAssociation(FIFAAssociation instance);
    partial void UpdateFIFAAssociation(FIFAAssociation instance);
    partial void DeleteFIFAAssociation(FIFAAssociation instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertCompetition(Competition instance);
    partial void UpdateCompetition(Competition instance);
    partial void DeleteCompetition(Competition instance);
    partial void InsertCoach(Coach instance);
    partial void UpdateCoach(Coach instance);
    partial void DeleteCoach(Coach instance);
    partial void InsertMatchLineup(MatchLineup instance);
    partial void UpdateMatchLineup(MatchLineup instance);
    partial void DeleteMatchLineup(MatchLineup instance);
    partial void InsertSeason(Season instance);
    partial void UpdateSeason(Season instance);
    partial void DeleteSeason(Season instance);
    partial void InsertMultimedia(Multimedia instance);
    partial void UpdateMultimedia(Multimedia instance);
    partial void DeleteMultimedia(Multimedia instance);
    #endregion
		
		public UaFootball_DBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["UaFootballConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public UaFootball_DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UaFootball_DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UaFootball_DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UaFootball_DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Stadium> Stadiums
		{
			get
			{
				return this.GetTable<Stadium>();
			}
		}
		
		public System.Data.Linq.Table<Club> Clubs
		{
			get
			{
				return this.GetTable<Club>();
			}
		}
		
		public System.Data.Linq.Table<PlayerPosition> PlayerPositions
		{
			get
			{
				return this.GetTable<PlayerPosition>();
			}
		}
		
		public System.Data.Linq.Table<MatchEvent> MatchEvents
		{
			get
			{
				return this.GetTable<MatchEvent>();
			}
		}
		
		public System.Data.Linq.Table<NationalTeam> NationalTeams
		{
			get
			{
				return this.GetTable<NationalTeam>();
			}
		}
		
		public System.Data.Linq.Table<CompetitionStage> CompetitionStages
		{
			get
			{
				return this.GetTable<CompetitionStage>();
			}
		}
		
		public System.Data.Linq.Table<Referee> Referees
		{
			get
			{
				return this.GetTable<Referee>();
			}
		}
		
		public System.Data.Linq.Table<MultimediaTag> MultimediaTags
		{
			get
			{
				return this.GetTable<MultimediaTag>();
			}
		}
		
		public System.Data.Linq.Table<Match> Matches
		{
			get
			{
				return this.GetTable<Match>();
			}
		}
		
		public System.Data.Linq.Table<vwMatch> vwMatches
		{
			get
			{
				return this.GetTable<vwMatch>();
			}
		}
		
		public System.Data.Linq.Table<FIFAAssociation> FIFAAssociations
		{
			get
			{
				return this.GetTable<FIFAAssociation>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<Competition> Competitions
		{
			get
			{
				return this.GetTable<Competition>();
			}
		}
		
		public System.Data.Linq.Table<Coach> Coaches
		{
			get
			{
				return this.GetTable<Coach>();
			}
		}
		
		public System.Data.Linq.Table<MatchLineup> MatchLineups
		{
			get
			{
				return this.GetTable<MatchLineup>();
			}
		}
		
		public System.Data.Linq.Table<Season> Seasons
		{
			get
			{
				return this.GetTable<Season>();
			}
		}
		
		public System.Data.Linq.Table<Multimedia> Multimedias
		{
			get
			{
				return this.GetTable<Multimedia>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cities")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _City_ID;
		
		private string _City_Name;
		
		private int _Country_ID;
		
		private EntitySet<Stadium> _Stadiums;
		
		private EntitySet<Club> _Clubs;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCity_IDChanging(int value);
    partial void OnCity_IDChanged();
    partial void OnCity_NameChanging(string value);
    partial void OnCity_NameChanged();
    partial void OnCountry_IDChanging(int value);
    partial void OnCountry_IDChanged();
    #endregion
		
		public City()
		{
			this._Stadiums = new EntitySet<Stadium>(new Action<Stadium>(this.attach_Stadiums), new Action<Stadium>(this.detach_Stadiums));
			this._Clubs = new EntitySet<Club>(new Action<Club>(this.attach_Clubs), new Action<Club>(this.detach_Clubs));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int City_ID
		{
			get
			{
				return this._City_ID;
			}
			set
			{
				if ((this._City_ID != value))
				{
					this.OnCity_IDChanging(value);
					this.SendPropertyChanging();
					this._City_ID = value;
					this.SendPropertyChanged("City_ID");
					this.OnCity_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City_Name
		{
			get
			{
				return this._City_Name;
			}
			set
			{
				if ((this._City_Name != value))
				{
					this.OnCity_NameChanging(value);
					this.SendPropertyChanging();
					this._City_Name = value;
					this.SendPropertyChanged("City_Name");
					this.OnCity_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_ID", DbType="Int NOT NULL")]
		public int Country_ID
		{
			get
			{
				return this._Country_ID;
			}
			set
			{
				if ((this._Country_ID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry_IDChanging(value);
					this.SendPropertyChanging();
					this._Country_ID = value;
					this.SendPropertyChanged("Country_ID");
					this.OnCountry_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Stadium", Storage="_Stadiums", ThisKey="City_ID", OtherKey="City_Id")]
		public EntitySet<Stadium> Stadiums
		{
			get
			{
				return this._Stadiums;
			}
			set
			{
				this._Stadiums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Club", Storage="_Clubs", ThisKey="City_ID", OtherKey="City_ID")]
		public EntitySet<Club> Clubs
		{
			get
			{
				return this._Clubs;
			}
			set
			{
				this._Clubs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_City", Storage="_Country", ThisKey="Country_ID", OtherKey="Country_ID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._Country_ID = value.Country_ID;
					}
					else
					{
						this._Country_ID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stadiums(Stadium entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Stadiums(Stadium entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Clubs(Club entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Clubs(Club entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Country_ID;
		
		private string _Country_Name;
		
		private string _Country_Code;
		
		private int _FIFAAssociation_ID;
		
		private EntitySet<City> _Cities;
		
		private EntitySet<NationalTeam> _NationalTeams;
		
		private EntitySet<Referee> _Referees;
		
		private EntitySet<Player> _Players;
		
		private EntitySet<Coach> _Coaches;
		
		private EntityRef<FIFAAssociation> _FIFAAssociation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountry_IDChanging(int value);
    partial void OnCountry_IDChanged();
    partial void OnCountry_NameChanging(string value);
    partial void OnCountry_NameChanged();
    partial void OnCountry_CodeChanging(string value);
    partial void OnCountry_CodeChanged();
    partial void OnFIFAAssociation_IDChanging(int value);
    partial void OnFIFAAssociation_IDChanged();
    #endregion
		
		public Country()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			this._NationalTeams = new EntitySet<NationalTeam>(new Action<NationalTeam>(this.attach_NationalTeams), new Action<NationalTeam>(this.detach_NationalTeams));
			this._Referees = new EntitySet<Referee>(new Action<Referee>(this.attach_Referees), new Action<Referee>(this.detach_Referees));
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._Coaches = new EntitySet<Coach>(new Action<Coach>(this.attach_Coaches), new Action<Coach>(this.detach_Coaches));
			this._FIFAAssociation = default(EntityRef<FIFAAssociation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Country_ID
		{
			get
			{
				return this._Country_ID;
			}
			set
			{
				if ((this._Country_ID != value))
				{
					this.OnCountry_IDChanging(value);
					this.SendPropertyChanging();
					this._Country_ID = value;
					this.SendPropertyChanged("Country_ID");
					this.OnCountry_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Country_Name
		{
			get
			{
				return this._Country_Name;
			}
			set
			{
				if ((this._Country_Name != value))
				{
					this.OnCountry_NameChanging(value);
					this.SendPropertyChanging();
					this._Country_Name = value;
					this.SendPropertyChanged("Country_Name");
					this.OnCountry_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_Code", DbType="VarChar(30)")]
		public string Country_Code
		{
			get
			{
				return this._Country_Code;
			}
			set
			{
				if ((this._Country_Code != value))
				{
					this.OnCountry_CodeChanging(value);
					this.SendPropertyChanging();
					this._Country_Code = value;
					this.SendPropertyChanged("Country_Code");
					this.OnCountry_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIFAAssociation_ID", DbType="Int NOT NULL")]
		public int FIFAAssociation_ID
		{
			get
			{
				return this._FIFAAssociation_ID;
			}
			set
			{
				if ((this._FIFAAssociation_ID != value))
				{
					if (this._FIFAAssociation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFIFAAssociation_IDChanging(value);
					this.SendPropertyChanging();
					this._FIFAAssociation_ID = value;
					this.SendPropertyChanged("FIFAAssociation_ID");
					this.OnFIFAAssociation_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_City", Storage="_Cities", ThisKey="Country_ID", OtherKey="Country_ID")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_NationalTeam", Storage="_NationalTeams", ThisKey="Country_ID", OtherKey="Country_Id")]
		public EntitySet<NationalTeam> NationalTeams
		{
			get
			{
				return this._NationalTeams;
			}
			set
			{
				this._NationalTeams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Referee", Storage="_Referees", ThisKey="Country_ID", OtherKey="Country_Id")]
		public EntitySet<Referee> Referees
		{
			get
			{
				return this._Referees;
			}
			set
			{
				this._Referees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Player", Storage="_Players", ThisKey="Country_ID", OtherKey="Country_Id")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Coach", Storage="_Coaches", ThisKey="Country_ID", OtherKey="CountryId")]
		public EntitySet<Coach> Coaches
		{
			get
			{
				return this._Coaches;
			}
			set
			{
				this._Coaches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FIFAAssociation_Country", Storage="_FIFAAssociation", ThisKey="FIFAAssociation_ID", OtherKey="FIFAAssociation_ID", IsForeignKey=true)]
		public FIFAAssociation FIFAAssociation
		{
			get
			{
				return this._FIFAAssociation.Entity;
			}
			set
			{
				FIFAAssociation previousValue = this._FIFAAssociation.Entity;
				if (((previousValue != value) 
							|| (this._FIFAAssociation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FIFAAssociation.Entity = null;
						previousValue.Countries.Remove(this);
					}
					this._FIFAAssociation.Entity = value;
					if ((value != null))
					{
						value.Countries.Add(this);
						this._FIFAAssociation_ID = value.FIFAAssociation_ID;
					}
					else
					{
						this._FIFAAssociation_ID = default(int);
					}
					this.SendPropertyChanged("FIFAAssociation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_NationalTeams(NationalTeam entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_NationalTeams(NationalTeam entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Referees(Referee entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Referees(Referee entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Coaches(Coach entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Coaches(Coach entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stadiums")]
	public partial class Stadium : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Stadium_Id;
		
		private string _Stadium_Name;
		
		private int _Capacity;
		
		private int _City_Id;
		
		private int _Year_Built;
		
		private EntitySet<Match> _Matches;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStadium_IdChanging(int value);
    partial void OnStadium_IdChanged();
    partial void OnStadium_NameChanging(string value);
    partial void OnStadium_NameChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    partial void OnCity_IdChanging(int value);
    partial void OnCity_IdChanged();
    partial void OnYear_BuiltChanging(int value);
    partial void OnYear_BuiltChanged();
    #endregion
		
		public Stadium()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stadium_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Stadium_Id
		{
			get
			{
				return this._Stadium_Id;
			}
			set
			{
				if ((this._Stadium_Id != value))
				{
					this.OnStadium_IdChanging(value);
					this.SendPropertyChanging();
					this._Stadium_Id = value;
					this.SendPropertyChanged("Stadium_Id");
					this.OnStadium_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stadium_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Stadium_Name
		{
			get
			{
				return this._Stadium_Name;
			}
			set
			{
				if ((this._Stadium_Name != value))
				{
					this.OnStadium_NameChanging(value);
					this.SendPropertyChanging();
					this._Stadium_Name = value;
					this.SendPropertyChanged("Stadium_Name");
					this.OnStadium_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_Id", DbType="Int NOT NULL")]
		public int City_Id
		{
			get
			{
				return this._City_Id;
			}
			set
			{
				if ((this._City_Id != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCity_IdChanging(value);
					this.SendPropertyChanging();
					this._City_Id = value;
					this.SendPropertyChanged("City_Id");
					this.OnCity_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year_Built", DbType="Int NOT NULL")]
		public int Year_Built
		{
			get
			{
				return this._Year_Built;
			}
			set
			{
				if ((this._Year_Built != value))
				{
					this.OnYear_BuiltChanging(value);
					this.SendPropertyChanging();
					this._Year_Built = value;
					this.SendPropertyChanged("Year_Built");
					this.OnYear_BuiltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stadium_Match", Storage="_Matches", ThisKey="Stadium_Id", OtherKey="Stadium_Id")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Stadium", Storage="_City", ThisKey="City_Id", OtherKey="City_ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Stadiums.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Stadiums.Add(this);
						this._City_Id = value.City_ID;
					}
					else
					{
						this._City_Id = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Stadium = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Stadium = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clubs")]
	public partial class Club : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Club_ID;
		
		private string _Club_Name;
		
		private string _Display_Name;
		
		private string _Logo;
		
		private System.Nullable<int> _Year_Found;
		
		private int _City_ID;
		
		private EntitySet<MultimediaTag> _MultimediaTags;
		
		private EntitySet<Match> _Matches;
		
		private EntitySet<Match> _Matches1;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClub_IDChanging(int value);
    partial void OnClub_IDChanged();
    partial void OnClub_NameChanging(string value);
    partial void OnClub_NameChanged();
    partial void OnDisplay_NameChanging(string value);
    partial void OnDisplay_NameChanged();
    partial void OnLogoChanging(string value);
    partial void OnLogoChanged();
    partial void OnYear_FoundChanging(System.Nullable<int> value);
    partial void OnYear_FoundChanged();
    partial void OnCity_IDChanging(int value);
    partial void OnCity_IDChanged();
    #endregion
		
		public Club()
		{
			this._MultimediaTags = new EntitySet<MultimediaTag>(new Action<MultimediaTag>(this.attach_MultimediaTags), new Action<MultimediaTag>(this.detach_MultimediaTags));
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Matches1 = new EntitySet<Match>(new Action<Match>(this.attach_Matches1), new Action<Match>(this.detach_Matches1));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Club_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Club_ID
		{
			get
			{
				return this._Club_ID;
			}
			set
			{
				if ((this._Club_ID != value))
				{
					this.OnClub_IDChanging(value);
					this.SendPropertyChanging();
					this._Club_ID = value;
					this.SendPropertyChanged("Club_ID");
					this.OnClub_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Club_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Club_Name
		{
			get
			{
				return this._Club_Name;
			}
			set
			{
				if ((this._Club_Name != value))
				{
					this.OnClub_NameChanging(value);
					this.SendPropertyChanging();
					this._Club_Name = value;
					this.SendPropertyChanged("Club_Name");
					this.OnClub_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Display_Name", DbType="VarChar(50)")]
		public string Display_Name
		{
			get
			{
				return this._Display_Name;
			}
			set
			{
				if ((this._Display_Name != value))
				{
					this.OnDisplay_NameChanging(value);
					this.SendPropertyChanging();
					this._Display_Name = value;
					this.SendPropertyChanged("Display_Name");
					this.OnDisplay_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="VarChar(50)")]
		public string Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year_Found", DbType="Int")]
		public System.Nullable<int> Year_Found
		{
			get
			{
				return this._Year_Found;
			}
			set
			{
				if ((this._Year_Found != value))
				{
					this.OnYear_FoundChanging(value);
					this.SendPropertyChanging();
					this._Year_Found = value;
					this.SendPropertyChanged("Year_Found");
					this.OnYear_FoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_ID", DbType="Int NOT NULL")]
		public int City_ID
		{
			get
			{
				return this._City_ID;
			}
			set
			{
				if ((this._City_ID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCity_IDChanging(value);
					this.SendPropertyChanging();
					this._City_ID = value;
					this.SendPropertyChanged("City_ID");
					this.OnCity_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_MultimediaTag", Storage="_MultimediaTags", ThisKey="Club_ID", OtherKey="Club_ID")]
		public EntitySet<MultimediaTag> MultimediaTags
		{
			get
			{
				return this._MultimediaTags;
			}
			set
			{
				this._MultimediaTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Match", Storage="_Matches", ThisKey="Club_ID", OtherKey="HomeClub_Id")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Match1", Storage="_Matches1", ThisKey="Club_ID", OtherKey="AwayClub_Id")]
		public EntitySet<Match> Matches1
		{
			get
			{
				return this._Matches1;
			}
			set
			{
				this._Matches1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Club", Storage="_City", ThisKey="City_ID", OtherKey="City_ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Clubs.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Clubs.Add(this);
						this._City_ID = value.City_ID;
					}
					else
					{
						this._City_ID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MultimediaTags(MultimediaTag entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_MultimediaTags(MultimediaTag entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
		
		private void attach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.Club1 = this;
		}
		
		private void detach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.Club1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerPositions")]
	public partial class PlayerPosition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerPosition_Id;
		
		private int _Player_Id;
		
		private string _Line_Cd;
		
		private string _Wing_Cd;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerPosition_IdChanging(int value);
    partial void OnPlayerPosition_IdChanged();
    partial void OnPlayer_IdChanging(int value);
    partial void OnPlayer_IdChanged();
    partial void OnLine_CdChanging(string value);
    partial void OnLine_CdChanged();
    partial void OnWing_CdChanging(string value);
    partial void OnWing_CdChanged();
    #endregion
		
		public PlayerPosition()
		{
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosition_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlayerPosition_Id
		{
			get
			{
				return this._PlayerPosition_Id;
			}
			set
			{
				if ((this._PlayerPosition_Id != value))
				{
					this.OnPlayerPosition_IdChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosition_Id = value;
					this.SendPropertyChanged("PlayerPosition_Id");
					this.OnPlayerPosition_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player_Id", DbType="Int NOT NULL")]
		public int Player_Id
		{
			get
			{
				return this._Player_Id;
			}
			set
			{
				if ((this._Player_Id != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayer_IdChanging(value);
					this.SendPropertyChanging();
					this._Player_Id = value;
					this.SendPropertyChanged("Player_Id");
					this.OnPlayer_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Line_Cd", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Line_Cd
		{
			get
			{
				return this._Line_Cd;
			}
			set
			{
				if ((this._Line_Cd != value))
				{
					this.OnLine_CdChanging(value);
					this.SendPropertyChanging();
					this._Line_Cd = value;
					this.SendPropertyChanged("Line_Cd");
					this.OnLine_CdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wing_Cd", DbType="NChar(10)")]
		public string Wing_Cd
		{
			get
			{
				return this._Wing_Cd;
			}
			set
			{
				if ((this._Wing_Cd != value))
				{
					this.OnWing_CdChanging(value);
					this.SendPropertyChanging();
					this._Wing_Cd = value;
					this.SendPropertyChanged("Wing_Cd");
					this.OnWing_CdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayerPosition", Storage="_Player", ThisKey="Player_Id", OtherKey="Player_Id", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.PlayerPositions.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.PlayerPositions.Add(this);
						this._Player_Id = value.Player_Id;
					}
					else
					{
						this._Player_Id = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MatchEvents")]
	public partial class MatchEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MatchEvent_Id;
		
		private string _Event_Cd;
		
		private int _Minute;
		
		private int _Player1_Id;
		
		private System.Nullable<int> _Player2_Id;
		
		private int _Match_Id;
		
		private System.Nullable<long> _EventFlags;
		
		private EntitySet<MultimediaTag> _MultimediaTags;
		
		private EntityRef<Match> _Match;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Player> _Player1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchEvent_IdChanging(int value);
    partial void OnMatchEvent_IdChanged();
    partial void OnEvent_CdChanging(string value);
    partial void OnEvent_CdChanged();
    partial void OnMinuteChanging(int value);
    partial void OnMinuteChanged();
    partial void OnPlayer1_IdChanging(int value);
    partial void OnPlayer1_IdChanged();
    partial void OnPlayer2_IdChanging(System.Nullable<int> value);
    partial void OnPlayer2_IdChanged();
    partial void OnMatch_IdChanging(int value);
    partial void OnMatch_IdChanged();
    partial void OnEventFlagsChanging(System.Nullable<long> value);
    partial void OnEventFlagsChanged();
    #endregion
		
		public MatchEvent()
		{
			this._MultimediaTags = new EntitySet<MultimediaTag>(new Action<MultimediaTag>(this.attach_MultimediaTags), new Action<MultimediaTag>(this.detach_MultimediaTags));
			this._Match = default(EntityRef<Match>);
			this._Player = default(EntityRef<Player>);
			this._Player1 = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchEvent_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MatchEvent_Id
		{
			get
			{
				return this._MatchEvent_Id;
			}
			set
			{
				if ((this._MatchEvent_Id != value))
				{
					this.OnMatchEvent_IdChanging(value);
					this.SendPropertyChanging();
					this._MatchEvent_Id = value;
					this.SendPropertyChanged("MatchEvent_Id");
					this.OnMatchEvent_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_Cd", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string Event_Cd
		{
			get
			{
				return this._Event_Cd;
			}
			set
			{
				if ((this._Event_Cd != value))
				{
					this.OnEvent_CdChanging(value);
					this.SendPropertyChanging();
					this._Event_Cd = value;
					this.SendPropertyChanged("Event_Cd");
					this.OnEvent_CdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Minute", DbType="Int NOT NULL")]
		public int Minute
		{
			get
			{
				return this._Minute;
			}
			set
			{
				if ((this._Minute != value))
				{
					this.OnMinuteChanging(value);
					this.SendPropertyChanging();
					this._Minute = value;
					this.SendPropertyChanged("Minute");
					this.OnMinuteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player1_Id", DbType="Int NOT NULL")]
		public int Player1_Id
		{
			get
			{
				return this._Player1_Id;
			}
			set
			{
				if ((this._Player1_Id != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayer1_IdChanging(value);
					this.SendPropertyChanging();
					this._Player1_Id = value;
					this.SendPropertyChanged("Player1_Id");
					this.OnPlayer1_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player2_Id", DbType="Int")]
		public System.Nullable<int> Player2_Id
		{
			get
			{
				return this._Player2_Id;
			}
			set
			{
				if ((this._Player2_Id != value))
				{
					if (this._Player1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayer2_IdChanging(value);
					this.SendPropertyChanging();
					this._Player2_Id = value;
					this.SendPropertyChanged("Player2_Id");
					this.OnPlayer2_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Match_Id", DbType="Int NOT NULL")]
		public int Match_Id
		{
			get
			{
				return this._Match_Id;
			}
			set
			{
				if ((this._Match_Id != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatch_IdChanging(value);
					this.SendPropertyChanging();
					this._Match_Id = value;
					this.SendPropertyChanged("Match_Id");
					this.OnMatch_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventFlags", DbType="BigInt")]
		public System.Nullable<long> EventFlags
		{
			get
			{
				return this._EventFlags;
			}
			set
			{
				if ((this._EventFlags != value))
				{
					this.OnEventFlagsChanging(value);
					this.SendPropertyChanging();
					this._EventFlags = value;
					this.SendPropertyChanged("EventFlags");
					this.OnEventFlagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchEvent_MultimediaTag", Storage="_MultimediaTags", ThisKey="MatchEvent_Id", OtherKey="MatchEvent_ID")]
		public EntitySet<MultimediaTag> MultimediaTags
		{
			get
			{
				return this._MultimediaTags;
			}
			set
			{
				this._MultimediaTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchEvent", Storage="_Match", ThisKey="Match_Id", OtherKey="Match_Id", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.MatchEvents.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.MatchEvents.Add(this);
						this._Match_Id = value.Match_Id;
					}
					else
					{
						this._Match_Id = default(int);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_MatchEvent", Storage="_Player", ThisKey="Player1_Id", OtherKey="Player_Id", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.MatchEvents.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.MatchEvents.Add(this);
						this._Player1_Id = value.Player_Id;
					}
					else
					{
						this._Player1_Id = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_MatchEvent1", Storage="_Player1", ThisKey="Player2_Id", OtherKey="Player_Id", IsForeignKey=true)]
		public Player Player1
		{
			get
			{
				return this._Player1.Entity;
			}
			set
			{
				Player previousValue = this._Player1.Entity;
				if (((previousValue != value) 
							|| (this._Player1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player1.Entity = null;
						previousValue.MatchEvents1.Remove(this);
					}
					this._Player1.Entity = value;
					if ((value != null))
					{
						value.MatchEvents1.Add(this);
						this._Player2_Id = value.Player_Id;
					}
					else
					{
						this._Player2_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Player1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MultimediaTags(MultimediaTag entity)
		{
			this.SendPropertyChanging();
			entity.MatchEvent = this;
		}
		
		private void detach_MultimediaTags(MultimediaTag entity)
		{
			this.SendPropertyChanging();
			entity.MatchEvent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NationalTeams")]
	public partial class NationalTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NationalTeam_Id;
		
		private int _Country_Id;
		
		private string _Logo;
		
		private string _NationalTeamType_Cd;
		
		private EntitySet<MultimediaTag> _MultimediaTags;
		
		private EntitySet<Match> _Matches;
		
		private EntitySet<Match> _Matches1;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNationalTeam_IdChanging(int value);
    partial void OnNationalTeam_IdChanged();
    partial void OnCountry_IdChanging(int value);
    partial void OnCountry_IdChanged();
    partial void OnLogoChanging(string value);
    partial void OnLogoChanged();
    partial void OnNationalTeamType_CdChanging(string value);
    partial void OnNationalTeamType_CdChanged();
    #endregion
		
		public NationalTeam()
		{
			this._MultimediaTags = new EntitySet<MultimediaTag>(new Action<MultimediaTag>(this.attach_MultimediaTags), new Action<MultimediaTag>(this.detach_MultimediaTags));
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Matches1 = new EntitySet<Match>(new Action<Match>(this.attach_Matches1), new Action<Match>(this.detach_Matches1));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalTeam_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NationalTeam_Id
		{
			get
			{
				return this._NationalTeam_Id;
			}
			set
			{
				if ((this._NationalTeam_Id != value))
				{
					this.OnNationalTeam_IdChanging(value);
					this.SendPropertyChanging();
					this._NationalTeam_Id = value;
					this.SendPropertyChanged("NationalTeam_Id");
					this.OnNationalTeam_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_Id", DbType="Int NOT NULL")]
		public int Country_Id
		{
			get
			{
				return this._Country_Id;
			}
			set
			{
				if ((this._Country_Id != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry_IdChanging(value);
					this.SendPropertyChanging();
					this._Country_Id = value;
					this.SendPropertyChanged("Country_Id");
					this.OnCountry_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="VarChar(50)")]
		public string Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalTeamType_Cd", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string NationalTeamType_Cd
		{
			get
			{
				return this._NationalTeamType_Cd;
			}
			set
			{
				if ((this._NationalTeamType_Cd != value))
				{
					this.OnNationalTeamType_CdChanging(value);
					this.SendPropertyChanging();
					this._NationalTeamType_Cd = value;
					this.SendPropertyChanged("NationalTeamType_Cd");
					this.OnNationalTeamType_CdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NationalTeam_MultimediaTag", Storage="_MultimediaTags", ThisKey="NationalTeam_Id", OtherKey="NationalTeam_ID")]
		public EntitySet<MultimediaTag> MultimediaTags
		{
			get
			{
				return this._MultimediaTags;
			}
			set
			{
				this._MultimediaTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NationalTeam_Match", Storage="_Matches", ThisKey="NationalTeam_Id", OtherKey="HomeNationalTeam_Id")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NationalTeam_Match1", Storage="_Matches1", ThisKey="NationalTeam_Id", OtherKey="AwayNationalTeam_Id")]
		public EntitySet<Match> Matches1
		{
			get
			{
				return this._Matches1;
			}
			set
			{
				this._Matches1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_NationalTeam", Storage="_Country", ThisKey="Country_Id", OtherKey="Country_ID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.NationalTeams.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.NationalTeams.Add(this);
						this._Country_Id = value.Country_ID;
					}
					else
					{
						this._Country_Id = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MultimediaTags(MultimediaTag entity)
		{
			this.SendPropertyChanging();
			entity.NationalTeam = this;
		}
		
		private void detach_MultimediaTags(MultimediaTag entity)
		{
			this.SendPropertyChanging();
			entity.NationalTeam = null;
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.NationalTeam = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.NationalTeam = null;
		}
		
		private void attach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.NationalTeam1 = this;
		}
		
		private void detach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.NationalTeam1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompetitionStages")]
	public partial class CompetitionStage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompetitionStage_ID;
		
		private int _Competition_ID;
		
		private string _CompetitionStage_Name;
		
		private EntitySet<Match> _Matches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompetitionStage_IDChanging(int value);
    partial void OnCompetitionStage_IDChanged();
    partial void OnCompetition_IDChanging(int value);
    partial void OnCompetition_IDChanged();
    partial void OnCompetitionStage_NameChanging(string value);
    partial void OnCompetitionStage_NameChanged();
    #endregion
		
		public CompetitionStage()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionStage_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompetitionStage_ID
		{
			get
			{
				return this._CompetitionStage_ID;
			}
			set
			{
				if ((this._CompetitionStage_ID != value))
				{
					this.OnCompetitionStage_IDChanging(value);
					this.SendPropertyChanging();
					this._CompetitionStage_ID = value;
					this.SendPropertyChanged("CompetitionStage_ID");
					this.OnCompetitionStage_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Competition_ID", DbType="Int NOT NULL")]
		public int Competition_ID
		{
			get
			{
				return this._Competition_ID;
			}
			set
			{
				if ((this._Competition_ID != value))
				{
					this.OnCompetition_IDChanging(value);
					this.SendPropertyChanging();
					this._Competition_ID = value;
					this.SendPropertyChanged("Competition_ID");
					this.OnCompetition_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionStage_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CompetitionStage_Name
		{
			get
			{
				return this._CompetitionStage_Name;
			}
			set
			{
				if ((this._CompetitionStage_Name != value))
				{
					this.OnCompetitionStage_NameChanging(value);
					this.SendPropertyChanging();
					this._CompetitionStage_Name = value;
					this.SendPropertyChanged("CompetitionStage_Name");
					this.OnCompetitionStage_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetitionStage_Match", Storage="_Matches", ThisKey="CompetitionStage_ID", OtherKey="CompetitionStage_Id")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.CompetitionStage = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.CompetitionStage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Referees")]
	public partial class Referee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Referee_Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _Country_Id;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private string _FirstName_EN;
		
		private string _LastName_EN;
		
		private EntitySet<Match> _Matches;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReferee_IdChanging(int value);
    partial void OnReferee_IdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnCountry_IdChanging(int value);
    partial void OnCountry_IdChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnFirstName_ENChanging(string value);
    partial void OnFirstName_ENChanged();
    partial void OnLastName_ENChanging(string value);
    partial void OnLastName_ENChanged();
    #endregion
		
		public Referee()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Referee_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Referee_Id
		{
			get
			{
				return this._Referee_Id;
			}
			set
			{
				if ((this._Referee_Id != value))
				{
					this.OnReferee_IdChanging(value);
					this.SendPropertyChanging();
					this._Referee_Id = value;
					this.SendPropertyChanged("Referee_Id");
					this.OnReferee_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_Id", DbType="Int NOT NULL")]
		public int Country_Id
		{
			get
			{
				return this._Country_Id;
			}
			set
			{
				if ((this._Country_Id != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry_IdChanging(value);
					this.SendPropertyChanging();
					this._Country_Id = value;
					this.SendPropertyChanged("Country_Id");
					this.OnCountry_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName_EN", DbType="Char(50)")]
		public string FirstName_EN
		{
			get
			{
				return this._FirstName_EN;
			}
			set
			{
				if ((this._FirstName_EN != value))
				{
					this.OnFirstName_ENChanging(value);
					this.SendPropertyChanging();
					this._FirstName_EN = value;
					this.SendPropertyChanged("FirstName_EN");
					this.OnFirstName_ENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName_EN", DbType="Char(50)")]
		public string LastName_EN
		{
			get
			{
				return this._LastName_EN;
			}
			set
			{
				if ((this._LastName_EN != value))
				{
					this.OnLastName_ENChanging(value);
					this.SendPropertyChanging();
					this._LastName_EN = value;
					this.SendPropertyChanged("LastName_EN");
					this.OnLastName_ENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Referee_Match", Storage="_Matches", ThisKey="Referee_Id", OtherKey="Referee_Id")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Referee", Storage="_Country", ThisKey="Country_Id", OtherKey="Country_ID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Referees.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Referees.Add(this);
						this._Country_Id = value.Country_ID;
					}
					else
					{
						this._Country_Id = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Referee = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Referee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MultimediaTags")]
	public partial class MultimediaTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MultimediaTag_ID;
		
		private int _Multimedia_ID;
		
		private System.Nullable<int> _Player_ID;
		
		private System.Nullable<int> _Match_ID;
		
		private System.Nullable<int> _MatchEvent_ID;
		
		private System.Nullable<int> _Club_ID;
		
		private System.Nullable<int> _NationalTeam_ID;
		
		private EntityRef<Club> _Club;
		
		private EntityRef<MatchEvent> _MatchEvent;
		
		private EntityRef<NationalTeam> _NationalTeam;
		
		private EntityRef<Match> _Match;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Multimedia> _Multimedia;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMultimediaTag_IDChanging(int value);
    partial void OnMultimediaTag_IDChanged();
    partial void OnMultimedia_IDChanging(int value);
    partial void OnMultimedia_IDChanged();
    partial void OnPlayer_IDChanging(System.Nullable<int> value);
    partial void OnPlayer_IDChanged();
    partial void OnMatch_IDChanging(System.Nullable<int> value);
    partial void OnMatch_IDChanged();
    partial void OnMatchEvent_IDChanging(System.Nullable<int> value);
    partial void OnMatchEvent_IDChanged();
    partial void OnClub_IDChanging(System.Nullable<int> value);
    partial void OnClub_IDChanged();
    partial void OnNationalTeam_IDChanging(System.Nullable<int> value);
    partial void OnNationalTeam_IDChanged();
    #endregion
		
		public MultimediaTag()
		{
			this._Club = default(EntityRef<Club>);
			this._MatchEvent = default(EntityRef<MatchEvent>);
			this._NationalTeam = default(EntityRef<NationalTeam>);
			this._Match = default(EntityRef<Match>);
			this._Player = default(EntityRef<Player>);
			this._Multimedia = default(EntityRef<Multimedia>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MultimediaTag_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MultimediaTag_ID
		{
			get
			{
				return this._MultimediaTag_ID;
			}
			set
			{
				if ((this._MultimediaTag_ID != value))
				{
					this.OnMultimediaTag_IDChanging(value);
					this.SendPropertyChanging();
					this._MultimediaTag_ID = value;
					this.SendPropertyChanged("MultimediaTag_ID");
					this.OnMultimediaTag_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Multimedia_ID", DbType="Int NOT NULL")]
		public int Multimedia_ID
		{
			get
			{
				return this._Multimedia_ID;
			}
			set
			{
				if ((this._Multimedia_ID != value))
				{
					if (this._Multimedia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMultimedia_IDChanging(value);
					this.SendPropertyChanging();
					this._Multimedia_ID = value;
					this.SendPropertyChanged("Multimedia_ID");
					this.OnMultimedia_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player_ID", DbType="Int")]
		public System.Nullable<int> Player_ID
		{
			get
			{
				return this._Player_ID;
			}
			set
			{
				if ((this._Player_ID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayer_IDChanging(value);
					this.SendPropertyChanging();
					this._Player_ID = value;
					this.SendPropertyChanged("Player_ID");
					this.OnPlayer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Match_ID", DbType="Int")]
		public System.Nullable<int> Match_ID
		{
			get
			{
				return this._Match_ID;
			}
			set
			{
				if ((this._Match_ID != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatch_IDChanging(value);
					this.SendPropertyChanging();
					this._Match_ID = value;
					this.SendPropertyChanged("Match_ID");
					this.OnMatch_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchEvent_ID", DbType="Int")]
		public System.Nullable<int> MatchEvent_ID
		{
			get
			{
				return this._MatchEvent_ID;
			}
			set
			{
				if ((this._MatchEvent_ID != value))
				{
					if (this._MatchEvent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchEvent_IDChanging(value);
					this.SendPropertyChanging();
					this._MatchEvent_ID = value;
					this.SendPropertyChanged("MatchEvent_ID");
					this.OnMatchEvent_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Club_ID", DbType="Int")]
		public System.Nullable<int> Club_ID
		{
			get
			{
				return this._Club_ID;
			}
			set
			{
				if ((this._Club_ID != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClub_IDChanging(value);
					this.SendPropertyChanging();
					this._Club_ID = value;
					this.SendPropertyChanged("Club_ID");
					this.OnClub_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalTeam_ID", DbType="Int")]
		public System.Nullable<int> NationalTeam_ID
		{
			get
			{
				return this._NationalTeam_ID;
			}
			set
			{
				if ((this._NationalTeam_ID != value))
				{
					if (this._NationalTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNationalTeam_IDChanging(value);
					this.SendPropertyChanging();
					this._NationalTeam_ID = value;
					this.SendPropertyChanged("NationalTeam_ID");
					this.OnNationalTeam_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_MultimediaTag", Storage="_Club", ThisKey="Club_ID", OtherKey="Club_ID", IsForeignKey=true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.MultimediaTags.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.MultimediaTags.Add(this);
						this._Club_ID = value.Club_ID;
					}
					else
					{
						this._Club_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchEvent_MultimediaTag", Storage="_MatchEvent", ThisKey="MatchEvent_ID", OtherKey="MatchEvent_Id", IsForeignKey=true)]
		public MatchEvent MatchEvent
		{
			get
			{
				return this._MatchEvent.Entity;
			}
			set
			{
				MatchEvent previousValue = this._MatchEvent.Entity;
				if (((previousValue != value) 
							|| (this._MatchEvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchEvent.Entity = null;
						previousValue.MultimediaTags.Remove(this);
					}
					this._MatchEvent.Entity = value;
					if ((value != null))
					{
						value.MultimediaTags.Add(this);
						this._MatchEvent_ID = value.MatchEvent_Id;
					}
					else
					{
						this._MatchEvent_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MatchEvent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NationalTeam_MultimediaTag", Storage="_NationalTeam", ThisKey="NationalTeam_ID", OtherKey="NationalTeam_Id", IsForeignKey=true)]
		public NationalTeam NationalTeam
		{
			get
			{
				return this._NationalTeam.Entity;
			}
			set
			{
				NationalTeam previousValue = this._NationalTeam.Entity;
				if (((previousValue != value) 
							|| (this._NationalTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NationalTeam.Entity = null;
						previousValue.MultimediaTags.Remove(this);
					}
					this._NationalTeam.Entity = value;
					if ((value != null))
					{
						value.MultimediaTags.Add(this);
						this._NationalTeam_ID = value.NationalTeam_Id;
					}
					else
					{
						this._NationalTeam_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("NationalTeam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MultimediaTag", Storage="_Match", ThisKey="Match_ID", OtherKey="Match_Id", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.MultimediaTags.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.MultimediaTags.Add(this);
						this._Match_ID = value.Match_Id;
					}
					else
					{
						this._Match_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_MultimediaTag", Storage="_Player", ThisKey="Player_ID", OtherKey="Player_Id", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.MultimediaTags.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.MultimediaTags.Add(this);
						this._Player_ID = value.Player_Id;
					}
					else
					{
						this._Player_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Multimedia_MultimediaTag", Storage="_Multimedia", ThisKey="Multimedia_ID", OtherKey="Multimedia_ID", IsForeignKey=true)]
		public Multimedia Multimedia
		{
			get
			{
				return this._Multimedia.Entity;
			}
			set
			{
				Multimedia previousValue = this._Multimedia.Entity;
				if (((previousValue != value) 
							|| (this._Multimedia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Multimedia.Entity = null;
						previousValue.MultimediaTags.Remove(this);
					}
					this._Multimedia.Entity = value;
					if ((value != null))
					{
						value.MultimediaTags.Add(this);
						this._Multimedia_ID = value.Multimedia_ID;
					}
					else
					{
						this._Multimedia_ID = default(int);
					}
					this.SendPropertyChanged("Multimedia");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Matches")]
	public partial class Match : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Match_Id;
		
		private System.Nullable<int> _HomeClub_Id;
		
		private System.Nullable<int> _AwayClub_Id;
		
		private System.Nullable<int> _HomeNationalTeam_Id;
		
		private System.Nullable<int> _AwayNationalTeam_Id;
		
		private short _HomeScore;
		
		private short _AwayScore;
		
		private System.Nullable<short> _HomePenaltyScore;
		
		private System.Nullable<short> _AwayPenaltyScore;
		
		private int _Competition_Id;
		
		private System.Nullable<int> _CompetitionStage_Id;
		
		private int _Season_Id;
		
		private int _Stadium_Id;
		
		private System.Nullable<int> _Spectators;
		
		private System.Nullable<int> _Referee_Id;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _Flags;
		
		private string _SpecialNote;
		
		private EntitySet<MatchEvent> _MatchEvents;
		
		private EntitySet<MultimediaTag> _MultimediaTags;
		
		private EntitySet<MatchLineup> _MatchLineups;
		
		private EntityRef<Club> _Club;
		
		private EntityRef<Club> _Club1;
		
		private EntityRef<CompetitionStage> _CompetitionStage;
		
		private EntityRef<NationalTeam> _NationalTeam;
		
		private EntityRef<NationalTeam> _NationalTeam1;
		
		private EntityRef<Referee> _Referee;
		
		private EntityRef<Stadium> _Stadium;
		
		private EntityRef<Competition> _Competition;
		
		private EntityRef<Season> _Season;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatch_IdChanging(int value);
    partial void OnMatch_IdChanged();
    partial void OnHomeClub_IdChanging(System.Nullable<int> value);
    partial void OnHomeClub_IdChanged();
    partial void OnAwayClub_IdChanging(System.Nullable<int> value);
    partial void OnAwayClub_IdChanged();
    partial void OnHomeNationalTeam_IdChanging(System.Nullable<int> value);
    partial void OnHomeNationalTeam_IdChanged();
    partial void OnAwayNationalTeam_IdChanging(System.Nullable<int> value);
    partial void OnAwayNationalTeam_IdChanged();
    partial void OnHomeScoreChanging(short value);
    partial void OnHomeScoreChanged();
    partial void OnAwayScoreChanging(short value);
    partial void OnAwayScoreChanged();
    partial void OnHomePenaltyScoreChanging(System.Nullable<short> value);
    partial void OnHomePenaltyScoreChanged();
    partial void OnAwayPenaltyScoreChanging(System.Nullable<short> value);
    partial void OnAwayPenaltyScoreChanged();
    partial void OnCompetition_IdChanging(int value);
    partial void OnCompetition_IdChanged();
    partial void OnCompetitionStage_IdChanging(System.Nullable<int> value);
    partial void OnCompetitionStage_IdChanged();
    partial void OnSeason_IdChanging(int value);
    partial void OnSeason_IdChanged();
    partial void OnStadium_IdChanging(int value);
    partial void OnStadium_IdChanged();
    partial void OnSpectatorsChanging(System.Nullable<int> value);
    partial void OnSpectatorsChanged();
    partial void OnReferee_IdChanging(System.Nullable<int> value);
    partial void OnReferee_IdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnFlagsChanging(System.Nullable<int> value);
    partial void OnFlagsChanged();
    partial void OnSpecialNoteChanging(string value);
    partial void OnSpecialNoteChanged();
    #endregion
		
		public Match()
		{
			this._MatchEvents = new EntitySet<MatchEvent>(new Action<MatchEvent>(this.attach_MatchEvents), new Action<MatchEvent>(this.detach_MatchEvents));
			this._MultimediaTags = new EntitySet<MultimediaTag>(new Action<MultimediaTag>(this.attach_MultimediaTags), new Action<MultimediaTag>(this.detach_MultimediaTags));
			this._MatchLineups = new EntitySet<MatchLineup>(new Action<MatchLineup>(this.attach_MatchLineups), new Action<MatchLineup>(this.detach_MatchLineups));
			this._Club = default(EntityRef<Club>);
			this._Club1 = default(EntityRef<Club>);
			this._CompetitionStage = default(EntityRef<CompetitionStage>);
			this._NationalTeam = default(EntityRef<NationalTeam>);
			this._NationalTeam1 = default(EntityRef<NationalTeam>);
			this._Referee = default(EntityRef<Referee>);
			this._Stadium = default(EntityRef<Stadium>);
			this._Competition = default(EntityRef<Competition>);
			this._Season = default(EntityRef<Season>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Match_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Match_Id
		{
			get
			{
				return this._Match_Id;
			}
			set
			{
				if ((this._Match_Id != value))
				{
					this.OnMatch_IdChanging(value);
					this.SendPropertyChanging();
					this._Match_Id = value;
					this.SendPropertyChanged("Match_Id");
					this.OnMatch_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeClub_Id", DbType="Int")]
		public System.Nullable<int> HomeClub_Id
		{
			get
			{
				return this._HomeClub_Id;
			}
			set
			{
				if ((this._HomeClub_Id != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHomeClub_IdChanging(value);
					this.SendPropertyChanging();
					this._HomeClub_Id = value;
					this.SendPropertyChanged("HomeClub_Id");
					this.OnHomeClub_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayClub_Id", DbType="Int")]
		public System.Nullable<int> AwayClub_Id
		{
			get
			{
				return this._AwayClub_Id;
			}
			set
			{
				if ((this._AwayClub_Id != value))
				{
					if (this._Club1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAwayClub_IdChanging(value);
					this.SendPropertyChanging();
					this._AwayClub_Id = value;
					this.SendPropertyChanged("AwayClub_Id");
					this.OnAwayClub_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeNationalTeam_Id", DbType="Int")]
		public System.Nullable<int> HomeNationalTeam_Id
		{
			get
			{
				return this._HomeNationalTeam_Id;
			}
			set
			{
				if ((this._HomeNationalTeam_Id != value))
				{
					if (this._NationalTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHomeNationalTeam_IdChanging(value);
					this.SendPropertyChanging();
					this._HomeNationalTeam_Id = value;
					this.SendPropertyChanged("HomeNationalTeam_Id");
					this.OnHomeNationalTeam_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayNationalTeam_Id", DbType="Int")]
		public System.Nullable<int> AwayNationalTeam_Id
		{
			get
			{
				return this._AwayNationalTeam_Id;
			}
			set
			{
				if ((this._AwayNationalTeam_Id != value))
				{
					if (this._NationalTeam1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAwayNationalTeam_IdChanging(value);
					this.SendPropertyChanging();
					this._AwayNationalTeam_Id = value;
					this.SendPropertyChanged("AwayNationalTeam_Id");
					this.OnAwayNationalTeam_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeScore", DbType="SmallInt NOT NULL")]
		public short HomeScore
		{
			get
			{
				return this._HomeScore;
			}
			set
			{
				if ((this._HomeScore != value))
				{
					this.OnHomeScoreChanging(value);
					this.SendPropertyChanging();
					this._HomeScore = value;
					this.SendPropertyChanged("HomeScore");
					this.OnHomeScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayScore", DbType="SmallInt NOT NULL")]
		public short AwayScore
		{
			get
			{
				return this._AwayScore;
			}
			set
			{
				if ((this._AwayScore != value))
				{
					this.OnAwayScoreChanging(value);
					this.SendPropertyChanging();
					this._AwayScore = value;
					this.SendPropertyChanged("AwayScore");
					this.OnAwayScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePenaltyScore", DbType="SmallInt")]
		public System.Nullable<short> HomePenaltyScore
		{
			get
			{
				return this._HomePenaltyScore;
			}
			set
			{
				if ((this._HomePenaltyScore != value))
				{
					this.OnHomePenaltyScoreChanging(value);
					this.SendPropertyChanging();
					this._HomePenaltyScore = value;
					this.SendPropertyChanged("HomePenaltyScore");
					this.OnHomePenaltyScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayPenaltyScore", DbType="SmallInt")]
		public System.Nullable<short> AwayPenaltyScore
		{
			get
			{
				return this._AwayPenaltyScore;
			}
			set
			{
				if ((this._AwayPenaltyScore != value))
				{
					this.OnAwayPenaltyScoreChanging(value);
					this.SendPropertyChanging();
					this._AwayPenaltyScore = value;
					this.SendPropertyChanged("AwayPenaltyScore");
					this.OnAwayPenaltyScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Competition_Id", DbType="Int NOT NULL")]
		public int Competition_Id
		{
			get
			{
				return this._Competition_Id;
			}
			set
			{
				if ((this._Competition_Id != value))
				{
					if (this._Competition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompetition_IdChanging(value);
					this.SendPropertyChanging();
					this._Competition_Id = value;
					this.SendPropertyChanged("Competition_Id");
					this.OnCompetition_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionStage_Id", DbType="Int")]
		public System.Nullable<int> CompetitionStage_Id
		{
			get
			{
				return this._CompetitionStage_Id;
			}
			set
			{
				if ((this._CompetitionStage_Id != value))
				{
					if (this._CompetitionStage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompetitionStage_IdChanging(value);
					this.SendPropertyChanging();
					this._CompetitionStage_Id = value;
					this.SendPropertyChanged("CompetitionStage_Id");
					this.OnCompetitionStage_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Season_Id", DbType="Int NOT NULL")]
		public int Season_Id
		{
			get
			{
				return this._Season_Id;
			}
			set
			{
				if ((this._Season_Id != value))
				{
					if (this._Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeason_IdChanging(value);
					this.SendPropertyChanging();
					this._Season_Id = value;
					this.SendPropertyChanged("Season_Id");
					this.OnSeason_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stadium_Id", DbType="Int NOT NULL")]
		public int Stadium_Id
		{
			get
			{
				return this._Stadium_Id;
			}
			set
			{
				if ((this._Stadium_Id != value))
				{
					if (this._Stadium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStadium_IdChanging(value);
					this.SendPropertyChanging();
					this._Stadium_Id = value;
					this.SendPropertyChanged("Stadium_Id");
					this.OnStadium_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Spectators", DbType="Int")]
		public System.Nullable<int> Spectators
		{
			get
			{
				return this._Spectators;
			}
			set
			{
				if ((this._Spectators != value))
				{
					this.OnSpectatorsChanging(value);
					this.SendPropertyChanging();
					this._Spectators = value;
					this.SendPropertyChanged("Spectators");
					this.OnSpectatorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Referee_Id", DbType="Int")]
		public System.Nullable<int> Referee_Id
		{
			get
			{
				return this._Referee_Id;
			}
			set
			{
				if ((this._Referee_Id != value))
				{
					if (this._Referee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferee_IdChanging(value);
					this.SendPropertyChanging();
					this._Referee_Id = value;
					this.SendPropertyChanged("Referee_Id");
					this.OnReferee_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flags", DbType="Int")]
		public System.Nullable<int> Flags
		{
			get
			{
				return this._Flags;
			}
			set
			{
				if ((this._Flags != value))
				{
					this.OnFlagsChanging(value);
					this.SendPropertyChanging();
					this._Flags = value;
					this.SendPropertyChanged("Flags");
					this.OnFlagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialNote", DbType="VarChar(4096)")]
		public string SpecialNote
		{
			get
			{
				return this._SpecialNote;
			}
			set
			{
				if ((this._SpecialNote != value))
				{
					this.OnSpecialNoteChanging(value);
					this.SendPropertyChanging();
					this._SpecialNote = value;
					this.SendPropertyChanged("SpecialNote");
					this.OnSpecialNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchEvent", Storage="_MatchEvents", ThisKey="Match_Id", OtherKey="Match_Id")]
		public EntitySet<MatchEvent> MatchEvents
		{
			get
			{
				return this._MatchEvents;
			}
			set
			{
				this._MatchEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MultimediaTag", Storage="_MultimediaTags", ThisKey="Match_Id", OtherKey="Match_ID")]
		public EntitySet<MultimediaTag> MultimediaTags
		{
			get
			{
				return this._MultimediaTags;
			}
			set
			{
				this._MultimediaTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchLineup", Storage="_MatchLineups", ThisKey="Match_Id", OtherKey="Match_Id")]
		public EntitySet<MatchLineup> MatchLineups
		{
			get
			{
				return this._MatchLineups;
			}
			set
			{
				this._MatchLineups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Match", Storage="_Club", ThisKey="HomeClub_Id", OtherKey="Club_ID", IsForeignKey=true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._HomeClub_Id = value.Club_ID;
					}
					else
					{
						this._HomeClub_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Match1", Storage="_Club1", ThisKey="AwayClub_Id", OtherKey="Club_ID", IsForeignKey=true)]
		public Club Club1
		{
			get
			{
				return this._Club1.Entity;
			}
			set
			{
				Club previousValue = this._Club1.Entity;
				if (((previousValue != value) 
							|| (this._Club1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club1.Entity = null;
						previousValue.Matches1.Remove(this);
					}
					this._Club1.Entity = value;
					if ((value != null))
					{
						value.Matches1.Add(this);
						this._AwayClub_Id = value.Club_ID;
					}
					else
					{
						this._AwayClub_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Club1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetitionStage_Match", Storage="_CompetitionStage", ThisKey="CompetitionStage_Id", OtherKey="CompetitionStage_ID", IsForeignKey=true)]
		public CompetitionStage CompetitionStage
		{
			get
			{
				return this._CompetitionStage.Entity;
			}
			set
			{
				CompetitionStage previousValue = this._CompetitionStage.Entity;
				if (((previousValue != value) 
							|| (this._CompetitionStage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompetitionStage.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._CompetitionStage.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._CompetitionStage_Id = value.CompetitionStage_ID;
					}
					else
					{
						this._CompetitionStage_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("CompetitionStage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NationalTeam_Match", Storage="_NationalTeam", ThisKey="HomeNationalTeam_Id", OtherKey="NationalTeam_Id", IsForeignKey=true)]
		public NationalTeam NationalTeam
		{
			get
			{
				return this._NationalTeam.Entity;
			}
			set
			{
				NationalTeam previousValue = this._NationalTeam.Entity;
				if (((previousValue != value) 
							|| (this._NationalTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NationalTeam.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._NationalTeam.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._HomeNationalTeam_Id = value.NationalTeam_Id;
					}
					else
					{
						this._HomeNationalTeam_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("NationalTeam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NationalTeam_Match1", Storage="_NationalTeam1", ThisKey="AwayNationalTeam_Id", OtherKey="NationalTeam_Id", IsForeignKey=true)]
		public NationalTeam NationalTeam1
		{
			get
			{
				return this._NationalTeam1.Entity;
			}
			set
			{
				NationalTeam previousValue = this._NationalTeam1.Entity;
				if (((previousValue != value) 
							|| (this._NationalTeam1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NationalTeam1.Entity = null;
						previousValue.Matches1.Remove(this);
					}
					this._NationalTeam1.Entity = value;
					if ((value != null))
					{
						value.Matches1.Add(this);
						this._AwayNationalTeam_Id = value.NationalTeam_Id;
					}
					else
					{
						this._AwayNationalTeam_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("NationalTeam1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Referee_Match", Storage="_Referee", ThisKey="Referee_Id", OtherKey="Referee_Id", IsForeignKey=true)]
		public Referee Referee
		{
			get
			{
				return this._Referee.Entity;
			}
			set
			{
				Referee previousValue = this._Referee.Entity;
				if (((previousValue != value) 
							|| (this._Referee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Referee.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Referee.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._Referee_Id = value.Referee_Id;
					}
					else
					{
						this._Referee_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Referee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stadium_Match", Storage="_Stadium", ThisKey="Stadium_Id", OtherKey="Stadium_Id", IsForeignKey=true)]
		public Stadium Stadium
		{
			get
			{
				return this._Stadium.Entity;
			}
			set
			{
				Stadium previousValue = this._Stadium.Entity;
				if (((previousValue != value) 
							|| (this._Stadium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stadium.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Stadium.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._Stadium_Id = value.Stadium_Id;
					}
					else
					{
						this._Stadium_Id = default(int);
					}
					this.SendPropertyChanged("Stadium");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_Match", Storage="_Competition", ThisKey="Competition_Id", OtherKey="Competition_Id", IsForeignKey=true)]
		public Competition Competition
		{
			get
			{
				return this._Competition.Entity;
			}
			set
			{
				Competition previousValue = this._Competition.Entity;
				if (((previousValue != value) 
							|| (this._Competition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Competition.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Competition.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._Competition_Id = value.Competition_Id;
					}
					else
					{
						this._Competition_Id = default(int);
					}
					this.SendPropertyChanged("Competition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_Match", Storage="_Season", ThisKey="Season_Id", OtherKey="Season_Id", IsForeignKey=true)]
		public Season Season
		{
			get
			{
				return this._Season.Entity;
			}
			set
			{
				Season previousValue = this._Season.Entity;
				if (((previousValue != value) 
							|| (this._Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Season.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Season.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._Season_Id = value.Season_Id;
					}
					else
					{
						this._Season_Id = default(int);
					}
					this.SendPropertyChanged("Season");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchEvents(MatchEvent entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_MatchEvents(MatchEvent entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_MultimediaTags(MultimediaTag entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_MultimediaTags(MultimediaTag entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_MatchLineups(MatchLineup entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_MatchLineups(MatchLineup entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vwMatches")]
	public partial class vwMatch
	{
		
		private int _Match_ID;
		
		private System.DateTime _Date;
		
		private string _Competition_Name;
		
		private string _CompetitionLevel_Cd;
		
		private string _Season_Description;
		
		private short _HomeScore;
		
		private short _AwayScore;
		
		private System.Nullable<short> _HomePenaltyScore;
		
		private System.Nullable<short> _AwayPenaltyScore;
		
		private int _Competition_Id;
		
		private string _CompetitionStage_Name;
		
		private int _Season_Id;
		
		private System.Nullable<int> _Referee_Id;
		
		private System.Nullable<int> _Flags;
		
		private int _Stadium_Id;
		
		private System.Nullable<int> _Spectators;
		
		private string _HomeTeam;
		
		private string _AwayTeam;
		
		private string _HomeTeamCountryCode;
		
		private string _AwayTeamCountryCode;
		
		public vwMatch()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Match_ID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Match_ID
		{
			get
			{
				return this._Match_ID;
			}
			set
			{
				if ((this._Match_ID != value))
				{
					this._Match_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Competition_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Competition_Name
		{
			get
			{
				return this._Competition_Name;
			}
			set
			{
				if ((this._Competition_Name != value))
				{
					this._Competition_Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionLevel_Cd", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string CompetitionLevel_Cd
		{
			get
			{
				return this._CompetitionLevel_Cd;
			}
			set
			{
				if ((this._CompetitionLevel_Cd != value))
				{
					this._CompetitionLevel_Cd = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Season_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Season_Description
		{
			get
			{
				return this._Season_Description;
			}
			set
			{
				if ((this._Season_Description != value))
				{
					this._Season_Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeScore", DbType="SmallInt NOT NULL")]
		public short HomeScore
		{
			get
			{
				return this._HomeScore;
			}
			set
			{
				if ((this._HomeScore != value))
				{
					this._HomeScore = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayScore", DbType="SmallInt NOT NULL")]
		public short AwayScore
		{
			get
			{
				return this._AwayScore;
			}
			set
			{
				if ((this._AwayScore != value))
				{
					this._AwayScore = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePenaltyScore", DbType="SmallInt")]
		public System.Nullable<short> HomePenaltyScore
		{
			get
			{
				return this._HomePenaltyScore;
			}
			set
			{
				if ((this._HomePenaltyScore != value))
				{
					this._HomePenaltyScore = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayPenaltyScore", DbType="SmallInt")]
		public System.Nullable<short> AwayPenaltyScore
		{
			get
			{
				return this._AwayPenaltyScore;
			}
			set
			{
				if ((this._AwayPenaltyScore != value))
				{
					this._AwayPenaltyScore = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Competition_Id", DbType="Int NOT NULL")]
		public int Competition_Id
		{
			get
			{
				return this._Competition_Id;
			}
			set
			{
				if ((this._Competition_Id != value))
				{
					this._Competition_Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionStage_Name", DbType="NVarChar(50)")]
		public string CompetitionStage_Name
		{
			get
			{
				return this._CompetitionStage_Name;
			}
			set
			{
				if ((this._CompetitionStage_Name != value))
				{
					this._CompetitionStage_Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Season_Id", DbType="Int NOT NULL")]
		public int Season_Id
		{
			get
			{
				return this._Season_Id;
			}
			set
			{
				if ((this._Season_Id != value))
				{
					this._Season_Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Referee_Id", DbType="Int")]
		public System.Nullable<int> Referee_Id
		{
			get
			{
				return this._Referee_Id;
			}
			set
			{
				if ((this._Referee_Id != value))
				{
					this._Referee_Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flags", DbType="Int")]
		public System.Nullable<int> Flags
		{
			get
			{
				return this._Flags;
			}
			set
			{
				if ((this._Flags != value))
				{
					this._Flags = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stadium_Id", DbType="Int NOT NULL")]
		public int Stadium_Id
		{
			get
			{
				return this._Stadium_Id;
			}
			set
			{
				if ((this._Stadium_Id != value))
				{
					this._Stadium_Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Spectators", DbType="Int")]
		public System.Nullable<int> Spectators
		{
			get
			{
				return this._Spectators;
			}
			set
			{
				if ((this._Spectators != value))
				{
					this._Spectators = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeTeam", DbType="VarChar(50)")]
		public string HomeTeam
		{
			get
			{
				return this._HomeTeam;
			}
			set
			{
				if ((this._HomeTeam != value))
				{
					this._HomeTeam = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayTeam", DbType="VarChar(50)")]
		public string AwayTeam
		{
			get
			{
				return this._AwayTeam;
			}
			set
			{
				if ((this._AwayTeam != value))
				{
					this._AwayTeam = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeTeamCountryCode", DbType="VarChar(30)")]
		public string HomeTeamCountryCode
		{
			get
			{
				return this._HomeTeamCountryCode;
			}
			set
			{
				if ((this._HomeTeamCountryCode != value))
				{
					this._HomeTeamCountryCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayTeamCountryCode", DbType="VarChar(30)")]
		public string AwayTeamCountryCode
		{
			get
			{
				return this._AwayTeamCountryCode;
			}
			set
			{
				if ((this._AwayTeamCountryCode != value))
				{
					this._AwayTeamCountryCode = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FIFAAssociations")]
	public partial class FIFAAssociation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FIFAAssociation_ID;
		
		private string _FIFAAssociation_Name;
		
		private string _FIFAAssociation_Description;
		
		private EntitySet<Country> _Countries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFIFAAssociation_IDChanging(int value);
    partial void OnFIFAAssociation_IDChanged();
    partial void OnFIFAAssociation_NameChanging(string value);
    partial void OnFIFAAssociation_NameChanged();
    partial void OnFIFAAssociation_DescriptionChanging(string value);
    partial void OnFIFAAssociation_DescriptionChanged();
    #endregion
		
		public FIFAAssociation()
		{
			this._Countries = new EntitySet<Country>(new Action<Country>(this.attach_Countries), new Action<Country>(this.detach_Countries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIFAAssociation_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FIFAAssociation_ID
		{
			get
			{
				return this._FIFAAssociation_ID;
			}
			set
			{
				if ((this._FIFAAssociation_ID != value))
				{
					this.OnFIFAAssociation_IDChanging(value);
					this.SendPropertyChanging();
					this._FIFAAssociation_ID = value;
					this.SendPropertyChanged("FIFAAssociation_ID");
					this.OnFIFAAssociation_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIFAAssociation_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FIFAAssociation_Name
		{
			get
			{
				return this._FIFAAssociation_Name;
			}
			set
			{
				if ((this._FIFAAssociation_Name != value))
				{
					this.OnFIFAAssociation_NameChanging(value);
					this.SendPropertyChanging();
					this._FIFAAssociation_Name = value;
					this.SendPropertyChanged("FIFAAssociation_Name");
					this.OnFIFAAssociation_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIFAAssociation_Description", DbType="VarChar(50)")]
		public string FIFAAssociation_Description
		{
			get
			{
				return this._FIFAAssociation_Description;
			}
			set
			{
				if ((this._FIFAAssociation_Description != value))
				{
					this.OnFIFAAssociation_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._FIFAAssociation_Description = value;
					this.SendPropertyChanged("FIFAAssociation_Description");
					this.OnFIFAAssociation_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FIFAAssociation_Country", Storage="_Countries", ThisKey="FIFAAssociation_ID", OtherKey="FIFAAssociation_ID")]
		public EntitySet<Country> Countries
		{
			get
			{
				return this._Countries;
			}
			set
			{
				this._Countries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.FIFAAssociation = this;
		}
		
		private void detach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.FIFAAssociation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Player_Id;
		
		private string _First_Name;
		
		private string _Last_Name;
		
		private string _Middle_Name;
		
		private string _Display_Name;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private System.Nullable<int> _Height;
		
		private System.Nullable<int> _Weight;
		
		private int _Country_Id;
		
		private string _First_Name_Int;
		
		private string _Last_Name_Int;
		
		private System.Nullable<bool> _RequiresReview;
		
		private string _UACity_Name;
		
		private string _UARegion_Name;
		
		private System.Nullable<System.DateTime> _LastUpdate_DT;
		
		private string _NameSearchString;
		
		private EntitySet<PlayerPosition> _PlayerPositions;
		
		private EntitySet<MatchEvent> _MatchEvents;
		
		private EntitySet<MatchEvent> _MatchEvents1;
		
		private EntitySet<MultimediaTag> _MultimediaTags;
		
		private EntitySet<MatchLineup> _MatchLineups;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayer_IdChanging(int value);
    partial void OnPlayer_IdChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnMiddle_NameChanging(string value);
    partial void OnMiddle_NameChanged();
    partial void OnDisplay_NameChanging(string value);
    partial void OnDisplay_NameChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnHeightChanging(System.Nullable<int> value);
    partial void OnHeightChanged();
    partial void OnWeightChanging(System.Nullable<int> value);
    partial void OnWeightChanged();
    partial void OnCountry_IdChanging(int value);
    partial void OnCountry_IdChanged();
    partial void OnFirst_Name_IntChanging(string value);
    partial void OnFirst_Name_IntChanged();
    partial void OnLast_Name_IntChanging(string value);
    partial void OnLast_Name_IntChanged();
    partial void OnRequiresReviewChanging(System.Nullable<bool> value);
    partial void OnRequiresReviewChanged();
    partial void OnUACity_NameChanging(string value);
    partial void OnUACity_NameChanged();
    partial void OnUARegion_NameChanging(string value);
    partial void OnUARegion_NameChanged();
    partial void OnLastUpdate_DTChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdate_DTChanged();
    partial void OnNameSearchStringChanging(string value);
    partial void OnNameSearchStringChanged();
    #endregion
		
		public Player()
		{
			this._PlayerPositions = new EntitySet<PlayerPosition>(new Action<PlayerPosition>(this.attach_PlayerPositions), new Action<PlayerPosition>(this.detach_PlayerPositions));
			this._MatchEvents = new EntitySet<MatchEvent>(new Action<MatchEvent>(this.attach_MatchEvents), new Action<MatchEvent>(this.detach_MatchEvents));
			this._MatchEvents1 = new EntitySet<MatchEvent>(new Action<MatchEvent>(this.attach_MatchEvents1), new Action<MatchEvent>(this.detach_MatchEvents1));
			this._MultimediaTags = new EntitySet<MultimediaTag>(new Action<MultimediaTag>(this.attach_MultimediaTags), new Action<MultimediaTag>(this.detach_MultimediaTags));
			this._MatchLineups = new EntitySet<MatchLineup>(new Action<MatchLineup>(this.attach_MatchLineups), new Action<MatchLineup>(this.detach_MatchLineups));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Player_Id
		{
			get
			{
				return this._Player_Id;
			}
			set
			{
				if ((this._Player_Id != value))
				{
					this.OnPlayer_IdChanging(value);
					this.SendPropertyChanging();
					this._Player_Id = value;
					this.SendPropertyChanged("Player_Id");
					this.OnPlayer_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="VarChar(50)")]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Middle_Name", DbType="VarChar(50)")]
		public string Middle_Name
		{
			get
			{
				return this._Middle_Name;
			}
			set
			{
				if ((this._Middle_Name != value))
				{
					this.OnMiddle_NameChanging(value);
					this.SendPropertyChanging();
					this._Middle_Name = value;
					this.SendPropertyChanged("Middle_Name");
					this.OnMiddle_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Display_Name", DbType="VarChar(50)")]
		public string Display_Name
		{
			get
			{
				return this._Display_Name;
			}
			set
			{
				if ((this._Display_Name != value))
				{
					this.OnDisplay_NameChanging(value);
					this.SendPropertyChanging();
					this._Display_Name = value;
					this.SendPropertyChanged("Display_Name");
					this.OnDisplay_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int")]
		public System.Nullable<int> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Int")]
		public System.Nullable<int> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_Id", DbType="Int NOT NULL")]
		public int Country_Id
		{
			get
			{
				return this._Country_Id;
			}
			set
			{
				if ((this._Country_Id != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry_IdChanging(value);
					this.SendPropertyChanging();
					this._Country_Id = value;
					this.SendPropertyChanged("Country_Id");
					this.OnCountry_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name_Int", DbType="NVarChar(50)")]
		public string First_Name_Int
		{
			get
			{
				return this._First_Name_Int;
			}
			set
			{
				if ((this._First_Name_Int != value))
				{
					this.OnFirst_Name_IntChanging(value);
					this.SendPropertyChanging();
					this._First_Name_Int = value;
					this.SendPropertyChanged("First_Name_Int");
					this.OnFirst_Name_IntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name_Int", DbType="NVarChar(50)")]
		public string Last_Name_Int
		{
			get
			{
				return this._Last_Name_Int;
			}
			set
			{
				if ((this._Last_Name_Int != value))
				{
					this.OnLast_Name_IntChanging(value);
					this.SendPropertyChanging();
					this._Last_Name_Int = value;
					this.SendPropertyChanged("Last_Name_Int");
					this.OnLast_Name_IntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiresReview", DbType="Bit")]
		public System.Nullable<bool> RequiresReview
		{
			get
			{
				return this._RequiresReview;
			}
			set
			{
				if ((this._RequiresReview != value))
				{
					this.OnRequiresReviewChanging(value);
					this.SendPropertyChanging();
					this._RequiresReview = value;
					this.SendPropertyChanged("RequiresReview");
					this.OnRequiresReviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UACity_Name", DbType="VarChar(50)")]
		public string UACity_Name
		{
			get
			{
				return this._UACity_Name;
			}
			set
			{
				if ((this._UACity_Name != value))
				{
					this.OnUACity_NameChanging(value);
					this.SendPropertyChanging();
					this._UACity_Name = value;
					this.SendPropertyChanged("UACity_Name");
					this.OnUACity_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UARegion_Name", DbType="VarChar(50)")]
		public string UARegion_Name
		{
			get
			{
				return this._UARegion_Name;
			}
			set
			{
				if ((this._UARegion_Name != value))
				{
					this.OnUARegion_NameChanging(value);
					this.SendPropertyChanging();
					this._UARegion_Name = value;
					this.SendPropertyChanged("UARegion_Name");
					this.OnUARegion_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate_DT", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdate_DT
		{
			get
			{
				return this._LastUpdate_DT;
			}
			set
			{
				if ((this._LastUpdate_DT != value))
				{
					this.OnLastUpdate_DTChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate_DT = value;
					this.SendPropertyChanged("LastUpdate_DT");
					this.OnLastUpdate_DTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameSearchString", DbType="VarChar(100)")]
		public string NameSearchString
		{
			get
			{
				return this._NameSearchString;
			}
			set
			{
				if ((this._NameSearchString != value))
				{
					this.OnNameSearchStringChanging(value);
					this.SendPropertyChanging();
					this._NameSearchString = value;
					this.SendPropertyChanged("NameSearchString");
					this.OnNameSearchStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayerPosition", Storage="_PlayerPositions", ThisKey="Player_Id", OtherKey="Player_Id")]
		public EntitySet<PlayerPosition> PlayerPositions
		{
			get
			{
				return this._PlayerPositions;
			}
			set
			{
				this._PlayerPositions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_MatchEvent", Storage="_MatchEvents", ThisKey="Player_Id", OtherKey="Player1_Id")]
		public EntitySet<MatchEvent> MatchEvents
		{
			get
			{
				return this._MatchEvents;
			}
			set
			{
				this._MatchEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_MatchEvent1", Storage="_MatchEvents1", ThisKey="Player_Id", OtherKey="Player2_Id")]
		public EntitySet<MatchEvent> MatchEvents1
		{
			get
			{
				return this._MatchEvents1;
			}
			set
			{
				this._MatchEvents1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_MultimediaTag", Storage="_MultimediaTags", ThisKey="Player_Id", OtherKey="Player_ID")]
		public EntitySet<MultimediaTag> MultimediaTags
		{
			get
			{
				return this._MultimediaTags;
			}
			set
			{
				this._MultimediaTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_MatchLineup", Storage="_MatchLineups", ThisKey="Player_Id", OtherKey="Player_Id")]
		public EntitySet<MatchLineup> MatchLineups
		{
			get
			{
				return this._MatchLineups;
			}
			set
			{
				this._MatchLineups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Player", Storage="_Country", ThisKey="Country_Id", OtherKey="Country_ID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._Country_Id = value.Country_ID;
					}
					else
					{
						this._Country_Id = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayerPositions(PlayerPosition entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_PlayerPositions(PlayerPosition entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_MatchEvents(MatchEvent entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_MatchEvents(MatchEvent entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_MatchEvents1(MatchEvent entity)
		{
			this.SendPropertyChanging();
			entity.Player1 = this;
		}
		
		private void detach_MatchEvents1(MatchEvent entity)
		{
			this.SendPropertyChanging();
			entity.Player1 = null;
		}
		
		private void attach_MultimediaTags(MultimediaTag entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_MultimediaTags(MultimediaTag entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_MatchLineups(MatchLineup entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_MatchLineups(MatchLineup entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Competitions")]
	public partial class Competition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Competition_Id;
		
		private string _Competition_Name;
		
		private string _CompetitionLevel_Cd;
		
		private string _Competition_Cd;
		
		private EntitySet<Match> _Matches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompetition_IdChanging(int value);
    partial void OnCompetition_IdChanged();
    partial void OnCompetition_NameChanging(string value);
    partial void OnCompetition_NameChanged();
    partial void OnCompetitionLevel_CdChanging(string value);
    partial void OnCompetitionLevel_CdChanged();
    partial void OnCompetition_CdChanging(string value);
    partial void OnCompetition_CdChanged();
    #endregion
		
		public Competition()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Competition_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Competition_Id
		{
			get
			{
				return this._Competition_Id;
			}
			set
			{
				if ((this._Competition_Id != value))
				{
					this.OnCompetition_IdChanging(value);
					this.SendPropertyChanging();
					this._Competition_Id = value;
					this.SendPropertyChanged("Competition_Id");
					this.OnCompetition_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Competition_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Competition_Name
		{
			get
			{
				return this._Competition_Name;
			}
			set
			{
				if ((this._Competition_Name != value))
				{
					this.OnCompetition_NameChanging(value);
					this.SendPropertyChanging();
					this._Competition_Name = value;
					this.SendPropertyChanged("Competition_Name");
					this.OnCompetition_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionLevel_Cd", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string CompetitionLevel_Cd
		{
			get
			{
				return this._CompetitionLevel_Cd;
			}
			set
			{
				if ((this._CompetitionLevel_Cd != value))
				{
					this.OnCompetitionLevel_CdChanging(value);
					this.SendPropertyChanging();
					this._CompetitionLevel_Cd = value;
					this.SendPropertyChanged("CompetitionLevel_Cd");
					this.OnCompetitionLevel_CdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Competition_Cd", DbType="VarChar(10)")]
		public string Competition_Cd
		{
			get
			{
				return this._Competition_Cd;
			}
			set
			{
				if ((this._Competition_Cd != value))
				{
					this.OnCompetition_CdChanging(value);
					this.SendPropertyChanging();
					this._Competition_Cd = value;
					this.SendPropertyChanged("Competition_Cd");
					this.OnCompetition_CdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_Match", Storage="_Matches", ThisKey="Competition_Id", OtherKey="Competition_Id")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Competition = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Competition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Coaches")]
	public partial class Coach : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CoachId;
		
		private int _CountryId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _FirstNameInt;
		
		private string _LastNameInt;
		
		private System.DateTime _DOB;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<MatchLineup> _MatchLineups;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCoachIdChanging(int value);
    partial void OnCoachIdChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameIntChanging(string value);
    partial void OnFirstNameIntChanged();
    partial void OnLastNameIntChanging(string value);
    partial void OnLastNameIntChanged();
    partial void OnDOBChanging(System.DateTime value);
    partial void OnDOBChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Coach()
		{
			this._MatchLineups = new EntitySet<MatchLineup>(new Action<MatchLineup>(this.attach_MatchLineups), new Action<MatchLineup>(this.detach_MatchLineups));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoachId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CoachId
		{
			get
			{
				return this._CoachId;
			}
			set
			{
				if ((this._CoachId != value))
				{
					this.OnCoachIdChanging(value);
					this.SendPropertyChanging();
					this._CoachId = value;
					this.SendPropertyChanged("CoachId");
					this.OnCoachIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstNameInt", DbType="VarChar(50)")]
		public string FirstNameInt
		{
			get
			{
				return this._FirstNameInt;
			}
			set
			{
				if ((this._FirstNameInt != value))
				{
					this.OnFirstNameIntChanging(value);
					this.SendPropertyChanging();
					this._FirstNameInt = value;
					this.SendPropertyChanged("FirstNameInt");
					this.OnFirstNameIntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastNameInt", DbType="VarChar(50)")]
		public string LastNameInt
		{
			get
			{
				return this._LastNameInt;
			}
			set
			{
				if ((this._LastNameInt != value))
				{
					this.OnLastNameIntChanging(value);
					this.SendPropertyChanging();
					this._LastNameInt = value;
					this.SendPropertyChanged("LastNameInt");
					this.OnLastNameIntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date NOT NULL")]
		public System.DateTime DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Coach_MatchLineup", Storage="_MatchLineups", ThisKey="CoachId", OtherKey="Coach_Id")]
		public EntitySet<MatchLineup> MatchLineups
		{
			get
			{
				return this._MatchLineups;
			}
			set
			{
				this._MatchLineups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Coach", Storage="_Country", ThisKey="CountryId", OtherKey="Country_ID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Coaches.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Coaches.Add(this);
						this._CountryId = value.Country_ID;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchLineups(MatchLineup entity)
		{
			this.SendPropertyChanging();
			entity.Coach = this;
		}
		
		private void detach_MatchLineups(MatchLineup entity)
		{
			this.SendPropertyChanging();
			entity.Coach = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MatchLineups")]
	public partial class MatchLineup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MatchLineup_Id;
		
		private System.Nullable<int> _Player_Id;
		
		private System.Nullable<int> _ShirtNumber;
		
		private bool _IsHomeTeamPlayer;
		
		private bool _IsSubstitute;
		
		private int _Match_Id;
		
		private System.Nullable<int> _Coach_Id;
		
		private EntityRef<Coach> _Coach;
		
		private EntityRef<Match> _Match;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchLineup_IdChanging(int value);
    partial void OnMatchLineup_IdChanged();
    partial void OnPlayer_IdChanging(System.Nullable<int> value);
    partial void OnPlayer_IdChanged();
    partial void OnShirtNumberChanging(System.Nullable<int> value);
    partial void OnShirtNumberChanged();
    partial void OnIsHomeTeamPlayerChanging(bool value);
    partial void OnIsHomeTeamPlayerChanged();
    partial void OnIsSubstituteChanging(bool value);
    partial void OnIsSubstituteChanged();
    partial void OnMatch_IdChanging(int value);
    partial void OnMatch_IdChanged();
    partial void OnCoach_IdChanging(System.Nullable<int> value);
    partial void OnCoach_IdChanged();
    #endregion
		
		public MatchLineup()
		{
			this._Coach = default(EntityRef<Coach>);
			this._Match = default(EntityRef<Match>);
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchLineup_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MatchLineup_Id
		{
			get
			{
				return this._MatchLineup_Id;
			}
			set
			{
				if ((this._MatchLineup_Id != value))
				{
					this.OnMatchLineup_IdChanging(value);
					this.SendPropertyChanging();
					this._MatchLineup_Id = value;
					this.SendPropertyChanged("MatchLineup_Id");
					this.OnMatchLineup_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player_Id", DbType="Int")]
		public System.Nullable<int> Player_Id
		{
			get
			{
				return this._Player_Id;
			}
			set
			{
				if ((this._Player_Id != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayer_IdChanging(value);
					this.SendPropertyChanging();
					this._Player_Id = value;
					this.SendPropertyChanged("Player_Id");
					this.OnPlayer_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShirtNumber", DbType="Int")]
		public System.Nullable<int> ShirtNumber
		{
			get
			{
				return this._ShirtNumber;
			}
			set
			{
				if ((this._ShirtNumber != value))
				{
					this.OnShirtNumberChanging(value);
					this.SendPropertyChanging();
					this._ShirtNumber = value;
					this.SendPropertyChanged("ShirtNumber");
					this.OnShirtNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHomeTeamPlayer", DbType="Bit NOT NULL")]
		public bool IsHomeTeamPlayer
		{
			get
			{
				return this._IsHomeTeamPlayer;
			}
			set
			{
				if ((this._IsHomeTeamPlayer != value))
				{
					this.OnIsHomeTeamPlayerChanging(value);
					this.SendPropertyChanging();
					this._IsHomeTeamPlayer = value;
					this.SendPropertyChanged("IsHomeTeamPlayer");
					this.OnIsHomeTeamPlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSubstitute", DbType="Bit NOT NULL")]
		public bool IsSubstitute
		{
			get
			{
				return this._IsSubstitute;
			}
			set
			{
				if ((this._IsSubstitute != value))
				{
					this.OnIsSubstituteChanging(value);
					this.SendPropertyChanging();
					this._IsSubstitute = value;
					this.SendPropertyChanged("IsSubstitute");
					this.OnIsSubstituteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Match_Id", DbType="Int NOT NULL")]
		public int Match_Id
		{
			get
			{
				return this._Match_Id;
			}
			set
			{
				if ((this._Match_Id != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatch_IdChanging(value);
					this.SendPropertyChanging();
					this._Match_Id = value;
					this.SendPropertyChanged("Match_Id");
					this.OnMatch_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coach_Id", DbType="Int")]
		public System.Nullable<int> Coach_Id
		{
			get
			{
				return this._Coach_Id;
			}
			set
			{
				if ((this._Coach_Id != value))
				{
					if (this._Coach.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCoach_IdChanging(value);
					this.SendPropertyChanging();
					this._Coach_Id = value;
					this.SendPropertyChanged("Coach_Id");
					this.OnCoach_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Coach_MatchLineup", Storage="_Coach", ThisKey="Coach_Id", OtherKey="CoachId", IsForeignKey=true)]
		public Coach Coach
		{
			get
			{
				return this._Coach.Entity;
			}
			set
			{
				Coach previousValue = this._Coach.Entity;
				if (((previousValue != value) 
							|| (this._Coach.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Coach.Entity = null;
						previousValue.MatchLineups.Remove(this);
					}
					this._Coach.Entity = value;
					if ((value != null))
					{
						value.MatchLineups.Add(this);
						this._Coach_Id = value.CoachId;
					}
					else
					{
						this._Coach_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Coach");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchLineup", Storage="_Match", ThisKey="Match_Id", OtherKey="Match_Id", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.MatchLineups.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.MatchLineups.Add(this);
						this._Match_Id = value.Match_Id;
					}
					else
					{
						this._Match_Id = default(int);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_MatchLineup", Storage="_Player", ThisKey="Player_Id", OtherKey="Player_Id", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.MatchLineups.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.MatchLineups.Add(this);
						this._Player_Id = value.Player_Id;
					}
					else
					{
						this._Player_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seasons")]
	public partial class Season : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Season_Id;
		
		private string _Season_Description;
		
		private string _CompetitionLevel_Cd;
		
		private string _Season_Cd;
		
		private EntitySet<Match> _Matches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeason_IdChanging(int value);
    partial void OnSeason_IdChanged();
    partial void OnSeason_DescriptionChanging(string value);
    partial void OnSeason_DescriptionChanged();
    partial void OnCompetitionLevel_CdChanging(string value);
    partial void OnCompetitionLevel_CdChanged();
    partial void OnSeason_CdChanging(string value);
    partial void OnSeason_CdChanged();
    #endregion
		
		public Season()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Season_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Season_Id
		{
			get
			{
				return this._Season_Id;
			}
			set
			{
				if ((this._Season_Id != value))
				{
					this.OnSeason_IdChanging(value);
					this.SendPropertyChanging();
					this._Season_Id = value;
					this.SendPropertyChanged("Season_Id");
					this.OnSeason_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Season_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Season_Description
		{
			get
			{
				return this._Season_Description;
			}
			set
			{
				if ((this._Season_Description != value))
				{
					this.OnSeason_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Season_Description = value;
					this.SendPropertyChanged("Season_Description");
					this.OnSeason_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionLevel_Cd", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string CompetitionLevel_Cd
		{
			get
			{
				return this._CompetitionLevel_Cd;
			}
			set
			{
				if ((this._CompetitionLevel_Cd != value))
				{
					this.OnCompetitionLevel_CdChanging(value);
					this.SendPropertyChanging();
					this._CompetitionLevel_Cd = value;
					this.SendPropertyChanged("CompetitionLevel_Cd");
					this.OnCompetitionLevel_CdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Season_Cd", DbType="VarChar(20)")]
		public string Season_Cd
		{
			get
			{
				return this._Season_Cd;
			}
			set
			{
				if ((this._Season_Cd != value))
				{
					this.OnSeason_CdChanging(value);
					this.SendPropertyChanging();
					this._Season_Cd = value;
					this.SendPropertyChanged("Season_Cd");
					this.OnSeason_CdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_Match", Storage="_Matches", ThisKey="Season_Id", OtherKey="Season_Id")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Season = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Season = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Multimedia")]
	public partial class Multimedia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Multimedia_ID;
		
		private char _MultimediaType_CD;
		
		private string _MultimediaSubType_CD;
		
		private string _FilePath;
		
		private string _FileName;
		
		private string _Source;
		
		private string _Author;
		
		private string _Description;
		
		private System.Nullable<long> _Flags;
		
		private EntitySet<MultimediaTag> _MultimediaTags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMultimedia_IDChanging(int value);
    partial void OnMultimedia_IDChanged();
    partial void OnMultimediaType_CDChanging(char value);
    partial void OnMultimediaType_CDChanged();
    partial void OnMultimediaSubType_CDChanging(string value);
    partial void OnMultimediaSubType_CDChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFlagsChanging(System.Nullable<long> value);
    partial void OnFlagsChanged();
    #endregion
		
		public Multimedia()
		{
			this._MultimediaTags = new EntitySet<MultimediaTag>(new Action<MultimediaTag>(this.attach_MultimediaTags), new Action<MultimediaTag>(this.detach_MultimediaTags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Multimedia_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Multimedia_ID
		{
			get
			{
				return this._Multimedia_ID;
			}
			set
			{
				if ((this._Multimedia_ID != value))
				{
					this.OnMultimedia_IDChanging(value);
					this.SendPropertyChanging();
					this._Multimedia_ID = value;
					this.SendPropertyChanged("Multimedia_ID");
					this.OnMultimedia_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MultimediaType_CD", DbType="Char(1) NOT NULL")]
		public char MultimediaType_CD
		{
			get
			{
				return this._MultimediaType_CD;
			}
			set
			{
				if ((this._MultimediaType_CD != value))
				{
					this.OnMultimediaType_CDChanging(value);
					this.SendPropertyChanging();
					this._MultimediaType_CD = value;
					this.SendPropertyChanged("MultimediaType_CD");
					this.OnMultimediaType_CDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MultimediaSubType_CD", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string MultimediaSubType_CD
		{
			get
			{
				return this._MultimediaSubType_CD;
			}
			set
			{
				if ((this._MultimediaSubType_CD != value))
				{
					this.OnMultimediaSubType_CDChanging(value);
					this.SendPropertyChanging();
					this._MultimediaSubType_CD = value;
					this.SendPropertyChanged("MultimediaSubType_CD");
					this.OnMultimediaSubType_CDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="VarChar(50)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author", DbType="VarChar(50)")]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flags", DbType="BigInt")]
		public System.Nullable<long> Flags
		{
			get
			{
				return this._Flags;
			}
			set
			{
				if ((this._Flags != value))
				{
					this.OnFlagsChanging(value);
					this.SendPropertyChanging();
					this._Flags = value;
					this.SendPropertyChanged("Flags");
					this.OnFlagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Multimedia_MultimediaTag", Storage="_MultimediaTags", ThisKey="Multimedia_ID", OtherKey="Multimedia_ID")]
		public EntitySet<MultimediaTag> MultimediaTags
		{
			get
			{
				return this._MultimediaTags;
			}
			set
			{
				this._MultimediaTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MultimediaTags(MultimediaTag entity)
		{
			this.SendPropertyChanging();
			entity.Multimedia = this;
		}
		
		private void detach_MultimediaTags(MultimediaTag entity)
		{
			this.SendPropertyChanging();
			entity.Multimedia = null;
		}
	}
}
#pragma warning restore 1591
