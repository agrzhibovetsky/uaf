// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UaFDatabaseEF.Models;

namespace UaFDatabaseEF.Migrations
{
    [DbContext(typeof(UaFootballContext))]
    [Migration("20210807174331_Add coach to match events - correct add")]
    partial class Addcoachtomatcheventscorrectadd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UaFDatabaseEF.Models.Cities", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("City_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnName("City_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("CountryId")
                        .HasColumnName("Country_ID");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Clubs", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Club_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnName("City_ID");

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasColumnName("Club_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DisplayName")
                        .HasColumnName("Display_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Logo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("YearFound")
                        .HasColumnName("Year_Found");

                    b.HasKey("ClubId");

                    b.HasIndex("CityId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Coaches", b =>
                {
                    b.Property<int>("CoachId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstNameInt")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastNameInt")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CoachId");

                    b.HasIndex("CountryId");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Competitions", b =>
                {
                    b.Property<int>("CompetitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Competition_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompetitionCd")
                        .HasColumnName("Competition_Cd")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("CompetitionLevelCd")
                        .IsRequired()
                        .HasColumnName("CompetitionLevel_Cd")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("CompetitionName")
                        .IsRequired()
                        .HasColumnName("Competition_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CompetitionId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.CompetitionStages", b =>
                {
                    b.Property<int>("CompetitionStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompetitionStage_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetitionId")
                        .HasColumnName("Competition_ID");

                    b.Property<string>("CompetitionStageName")
                        .IsRequired()
                        .HasColumnName("CompetitionStage_Name")
                        .HasMaxLength(50);

                    b.HasKey("CompetitionStageId");

                    b.ToTable("CompetitionStages");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Countries", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Country_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .HasColumnName("Country_Code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnName("Country_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("FifaassociationId")
                        .HasColumnName("FIFAAssociation_ID");

                    b.HasKey("CountryId");

                    b.HasIndex("FifaassociationId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Fifaassociations", b =>
                {
                    b.Property<int>("FifaassociationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FIFAAssociation_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FifaassociationDescription")
                        .HasColumnName("FIFAAssociation_Description")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FifaassociationName")
                        .IsRequired()
                        .HasColumnName("FIFAAssociation_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FifaassociationId");

                    b.ToTable("FIFAAssociations");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Matches", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Match_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminNotes")
                        .HasMaxLength(4096)
                        .IsUnicode(false);

                    b.Property<int?>("AwayClubId")
                        .HasColumnName("AwayClub_Id");

                    b.Property<int?>("AwayNationalTeamId")
                        .HasColumnName("AwayNationalTeam_Id");

                    b.Property<short?>("AwayPenaltyScore");

                    b.Property<short>("AwayScore");

                    b.Property<int>("CompetitionId")
                        .HasColumnName("Competition_Id");

                    b.Property<int?>("CompetitionStageId")
                        .HasColumnName("CompetitionStage_Id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("Flags");

                    b.Property<int?>("HomeClubId")
                        .HasColumnName("HomeClub_Id");

                    b.Property<int?>("HomeNationalTeamId")
                        .HasColumnName("HomeNationalTeam_Id");

                    b.Property<short?>("HomePenaltyScore");

                    b.Property<short>("HomeScore");

                    b.Property<int?>("RefereeId")
                        .HasColumnName("Referee_Id");

                    b.Property<int>("SeasonId")
                        .HasColumnName("Season_Id");

                    b.Property<string>("Sources")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<string>("SpecialNote")
                        .HasMaxLength(4096)
                        .IsUnicode(false);

                    b.Property<int?>("Spectators");

                    b.Property<int>("StadiumId")
                        .HasColumnName("Stadium_Id");

                    b.HasKey("MatchId");

                    b.HasIndex("AwayClubId");

                    b.HasIndex("AwayNationalTeamId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("CompetitionStageId");

                    b.HasIndex("HomeClubId");

                    b.HasIndex("HomeNationalTeamId");

                    b.HasIndex("RefereeId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("StadiumId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.MatchEvents", b =>
                {
                    b.Property<int>("MatchEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MatchEvent_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CoachId");

                    b.Property<string>("EventCd")
                        .IsRequired()
                        .HasColumnName("Event_Cd")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<long?>("EventFlags");

                    b.Property<int>("MatchId")
                        .HasColumnName("Match_Id");

                    b.Property<int>("Minute");

                    b.Property<int>("Player1Id")
                        .HasColumnName("Player1_Id");

                    b.Property<int?>("Player2Id")
                        .HasColumnName("Player2_Id");

                    b.HasKey("MatchEventId");

                    b.HasIndex("CoachId");

                    b.HasIndex("MatchId");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.ToTable("MatchEvents");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.MatchLineups", b =>
                {
                    b.Property<int>("MatchLineupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MatchLineup_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CoachId")
                        .HasColumnName("Coach_Id");

                    b.Property<int?>("Flags");

                    b.Property<bool>("IsHomeTeamPlayer");

                    b.Property<bool>("IsSubstitute");

                    b.Property<int>("MatchId")
                        .HasColumnName("Match_Id");

                    b.Property<int?>("PlayerId")
                        .HasColumnName("Player_Id");

                    b.Property<int?>("ShirtNumber");

                    b.HasKey("MatchLineupId");

                    b.HasIndex("CoachId");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchLineups");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.MatchNotes", b =>
                {
                    b.Property<int>("MatchNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MatchNote_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("MatchId")
                        .HasColumnName("Match_Id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false);

                    b.HasKey("MatchNoteId");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchNotes");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150);

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300);

                    b.Property<byte[]>("Model")
                        .IsRequired();

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("MigrationId", "ContextKey");

                    b.ToTable("__MigrationHistory");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Multimedia", b =>
                {
                    b.Property<int>("MultimediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Multimedia_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTaken")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("Flags");

                    b.Property<string>("MultimediaSubTypeCd")
                        .IsRequired()
                        .HasColumnName("MultimediaSubType_CD")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("MultimediaTypeCd")
                        .IsRequired()
                        .HasColumnName("MultimediaType_CD")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("MultimediaId");

                    b.ToTable("Multimedia");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.MultimediaTags", b =>
                {
                    b.Property<int>("MultimediaTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MultimediaTag_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClubId")
                        .HasColumnName("Club_ID");

                    b.Property<int?>("MatchEventId")
                        .HasColumnName("MatchEvent_ID");

                    b.Property<int?>("MatchId")
                        .HasColumnName("Match_ID");

                    b.Property<int>("MultimediaId")
                        .HasColumnName("Multimedia_ID");

                    b.Property<int?>("NationalTeamId")
                        .HasColumnName("NationalTeam_ID");

                    b.Property<int?>("PlayerId")
                        .HasColumnName("Player_ID");

                    b.HasKey("MultimediaTagId");

                    b.HasIndex("ClubId");

                    b.HasIndex("MatchEventId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MultimediaId");

                    b.HasIndex("NationalTeamId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MultimediaTags");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.NationalTeams", b =>
                {
                    b.Property<int>("NationalTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NationalTeam_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnName("Country_Id");

                    b.Property<string>("Logo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NationalTeamTypeCd")
                        .IsRequired()
                        .HasColumnName("NationalTeamType_Cd")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.HasKey("NationalTeamId");

                    b.HasIndex("CountryId");

                    b.ToTable("NationalTeams");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.PhotoGalleryAlbums", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsUnt")
                        .HasColumnName("IsUNT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ProviderCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ProviderInternalId")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("PhotoGalleryAlbums");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.PlayerPositions", b =>
                {
                    b.Property<int>("PlayerPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PlayerPosition_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LineCd")
                        .IsRequired()
                        .HasColumnName("Line_Cd")
                        .HasMaxLength(10);

                    b.Property<int>("PlayerId")
                        .HasColumnName("Player_Id");

                    b.Property<string>("WingCd")
                        .HasColumnName("Wing_Cd")
                        .HasMaxLength(10);

                    b.HasKey("PlayerPositionId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerPositions");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Players", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Player_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnName("Country_Id");

                    b.Property<string>("DisplayName")
                        .HasColumnName("Display_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasColumnName("First_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstNameInt")
                        .HasColumnName("First_Name_Int")
                        .HasMaxLength(50);

                    b.Property<int?>("Height");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("Last_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastNameInt")
                        .HasColumnName("Last_Name_Int")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdateDt")
                        .HasColumnName("LastUpdate_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("MiddleName")
                        .HasColumnName("Middle_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NameSearchString")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("RequiresReview");

                    b.Property<string>("UacityName")
                        .HasColumnName("UACity_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UaregionName")
                        .HasColumnName("UARegion_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Weight");

                    b.HasKey("PlayerId");

                    b.HasIndex("CountryId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Referees", b =>
                {
                    b.Property<int>("RefereeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Referee_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnName("Country_Id");

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstNameEn")
                        .HasColumnName("FirstName_EN")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastNameEn")
                        .HasColumnName("LastName_EN")
                        .HasMaxLength(50);

                    b.HasKey("RefereeId");

                    b.HasIndex("CountryId");

                    b.ToTable("Referees");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Seasons", b =>
                {
                    b.Property<int>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Season_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompetitionLevelCd")
                        .IsRequired()
                        .HasColumnName("CompetitionLevel_Cd")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("SeasonCd")
                        .HasColumnName("Season_Cd")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("SeasonDescription")
                        .IsRequired()
                        .HasColumnName("Season_Description")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("SeasonId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Stadiums", b =>
                {
                    b.Property<int>("StadiumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Stadium_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity");

                    b.Property<int>("CityId")
                        .HasColumnName("City_Id");

                    b.Property<string>("Comments")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<string>("StadiumName")
                        .IsRequired()
                        .HasColumnName("Stadium_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("YearBuilt")
                        .HasColumnName("Year_Built");

                    b.HasKey("StadiumId");

                    b.HasIndex("CityId");

                    b.ToTable("Stadiums");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Tasks", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Task_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("StatusCd")
                        .IsRequired()
                        .HasColumnName("Status_CD")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("TypeCd")
                        .IsRequired()
                        .HasColumnName("Type_CD")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.HasKey("TaskId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Cities", b =>
                {
                    b.HasOne("UaFDatabaseEF.Models.Countries", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Cities_Countries");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Clubs", b =>
                {
                    b.HasOne("UaFDatabaseEF.Models.Cities", "City")
                        .WithMany("Clubs")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Clubs_Cities");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Coaches", b =>
                {
                    b.HasOne("UaFDatabaseEF.Models.Countries", "Country")
                        .WithMany("Coaches")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Coaches_Countries");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Countries", b =>
                {
                    b.HasOne("UaFDatabaseEF.Models.Fifaassociations", "Fifaassociation")
                        .WithMany("Countries")
                        .HasForeignKey("FifaassociationId")
                        .HasConstraintName("FK_Countries_FIFAAssociations");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Matches", b =>
                {
                    b.HasOne("UaFDatabaseEF.Models.Clubs", "AwayClub")
                        .WithMany("MatchesAwayClub")
                        .HasForeignKey("AwayClubId")
                        .HasConstraintName("FK_Matches_Clubs1");

                    b.HasOne("UaFDatabaseEF.Models.NationalTeams", "AwayNationalTeam")
                        .WithMany("MatchesAwayNationalTeam")
                        .HasForeignKey("AwayNationalTeamId")
                        .HasConstraintName("FK_Matches_NationalTeams1");

                    b.HasOne("UaFDatabaseEF.Models.Competitions", "Competition")
                        .WithMany("Matches")
                        .HasForeignKey("CompetitionId")
                        .HasConstraintName("FK_Matches_Competitions");

                    b.HasOne("UaFDatabaseEF.Models.CompetitionStages", "CompetitionStage")
                        .WithMany("Matches")
                        .HasForeignKey("CompetitionStageId")
                        .HasConstraintName("FK_Matches_CompetitionStages");

                    b.HasOne("UaFDatabaseEF.Models.Clubs", "HomeClub")
                        .WithMany("MatchesHomeClub")
                        .HasForeignKey("HomeClubId")
                        .HasConstraintName("FK_Matches_Clubs");

                    b.HasOne("UaFDatabaseEF.Models.NationalTeams", "HomeNationalTeam")
                        .WithMany("MatchesHomeNationalTeam")
                        .HasForeignKey("HomeNationalTeamId")
                        .HasConstraintName("FK_Matches_NationalTeams");

                    b.HasOne("UaFDatabaseEF.Models.Referees", "Referee")
                        .WithMany("Matches")
                        .HasForeignKey("RefereeId")
                        .HasConstraintName("FK_Matches_Referees");

                    b.HasOne("UaFDatabaseEF.Models.Seasons", "Season")
                        .WithMany("Matches")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("FK_Matches_Seasons");

                    b.HasOne("UaFDatabaseEF.Models.Stadiums", "Stadium")
                        .WithMany("Matches")
                        .HasForeignKey("StadiumId")
                        .HasConstraintName("FK_Matches_Stadiums");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.MatchEvents", b =>
                {
                    b.HasOne("UaFDatabaseEF.Models.Coaches", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.HasOne("UaFDatabaseEF.Models.Matches", "Match")
                        .WithMany("MatchEvents")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_MatchEvents_Matches");

                    b.HasOne("UaFDatabaseEF.Models.Players", "Player1")
                        .WithMany("MatchEventsPlayer1")
                        .HasForeignKey("Player1Id")
                        .HasConstraintName("FK_MatchEvents_Players");

                    b.HasOne("UaFDatabaseEF.Models.Players", "Player2")
                        .WithMany("MatchEventsPlayer2")
                        .HasForeignKey("Player2Id")
                        .HasConstraintName("FK_MatchEvents_Players1");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.MatchLineups", b =>
                {
                    b.HasOne("UaFDatabaseEF.Models.Coaches", "Coach")
                        .WithMany("MatchLineups")
                        .HasForeignKey("CoachId")
                        .HasConstraintName("FK_MatchLineups_Coaches");

                    b.HasOne("UaFDatabaseEF.Models.Matches", "Match")
                        .WithMany("MatchLineups")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_MatchLineups_Matches");

                    b.HasOne("UaFDatabaseEF.Models.Players", "Player")
                        .WithMany("MatchLineups")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_MatchLineups_Players");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.MatchNotes", b =>
                {
                    b.HasOne("UaFDatabaseEF.Models.Matches", "Match")
                        .WithMany("MatchNotes")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_MatchNotes_Matches");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.MultimediaTags", b =>
                {
                    b.HasOne("UaFDatabaseEF.Models.Clubs", "Club")
                        .WithMany("MultimediaTags")
                        .HasForeignKey("ClubId")
                        .HasConstraintName("FK_MultimediaTags_Clubs");

                    b.HasOne("UaFDatabaseEF.Models.MatchEvents", "MatchEvent")
                        .WithMany("MultimediaTags")
                        .HasForeignKey("MatchEventId")
                        .HasConstraintName("FK_MultimediaTags_MatchEvents");

                    b.HasOne("UaFDatabaseEF.Models.Matches", "Match")
                        .WithMany("MultimediaTags")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_MultimediaTags_Matches");

                    b.HasOne("UaFDatabaseEF.Models.Multimedia", "Multimedia")
                        .WithMany("MultimediaTags")
                        .HasForeignKey("MultimediaId")
                        .HasConstraintName("FK_MultimediaTags_Multimedia");

                    b.HasOne("UaFDatabaseEF.Models.NationalTeams", "NationalTeam")
                        .WithMany("MultimediaTags")
                        .HasForeignKey("NationalTeamId")
                        .HasConstraintName("FK_MultimediaTags_NationalTeams");

                    b.HasOne("UaFDatabaseEF.Models.Players", "Player")
                        .WithMany("MultimediaTags")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_MultimediaTags_Players");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.NationalTeams", b =>
                {
                    b.HasOne("UaFDatabaseEF.Models.Countries", "Country")
                        .WithMany("NationalTeams")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_NationalTeams_Countries");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.PlayerPositions", b =>
                {
                    b.HasOne("UaFDatabaseEF.Models.Players", "Player")
                        .WithMany("PlayerPositions")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_PlayerPositions_Players");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Players", b =>
                {
                    b.HasOne("UaFDatabaseEF.Models.Countries", "Country")
                        .WithMany("Players")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Players_Countries");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Referees", b =>
                {
                    b.HasOne("UaFDatabaseEF.Models.Countries", "Country")
                        .WithMany("Referees")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Referees_Countries");
                });

            modelBuilder.Entity("UaFDatabaseEF.Models.Stadiums", b =>
                {
                    b.HasOne("UaFDatabaseEF.Models.Cities", "City")
                        .WithMany("Stadiums")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Stadiums_Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
